{
	"id": 0,
	"name": "lucid-ui",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 454,
			"name": "\"components/Button/Button\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/components/Button/Button.tsx",
			"children": [
				{
					"id": 455,
					"name": "IButtonProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 460,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid React children"
							},
							"sources": [
								{
									"fileName": "components/Button/Button.tsx",
									"line": 37,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "React.ReactNode"
							}
						},
						{
							"id": 458,
							"name": "className",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Activates the Button by giving it a \"pressed down\" look"
							},
							"sources": [
								{
									"fileName": "components/Button/Button.tsx",
									"line": 27,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 459,
							"name": "hasOnlyIcon",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Set this to \\`true\\` if you want the Button to only contain an icon.",
								"tags": [
									{
										"tag": "default",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "components/Button/Button.tsx",
									"line": 34,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 457,
							"name": "isActive",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Activates the Button by giving it a \"pressed down\" look",
								"tags": [
									{
										"tag": "default",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "components/Button/Button.tsx",
									"line": 24,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 456,
							"name": "isDisabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Disables the Button by greying it out",
								"tags": [
									{
										"tag": "default",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "components/Button/Button.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 461,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Style variations of the Button"
							},
							"sources": [
								{
									"fileName": "components/Button/Button.tsx",
									"line": 40,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "primary"
									},
									{
										"type": "stringLiteral",
										"value": "link"
									},
									{
										"type": "stringLiteral",
										"value": "danger"
									},
									{
										"type": "stringLiteral",
										"value": "invisible"
									}
								]
							}
						},
						{
							"id": 463,
							"name": "onClick",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Called when the user clicks the \\`Button\\`."
							},
							"sources": [
								{
									"fileName": "components/Button/Button.tsx",
									"line": 46,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 464,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 465,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 466,
															"name": "__namedParameters",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"originalName": "__0",
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 467,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 468,
																			"name": "event",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "components/Button/Button.tsx",
																					"line": 47,
																					"character": 7
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "bivarianceHack"
																			}
																		},
																		{
																			"id": 469,
																			"name": "props",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "components/Button/Button.tsx",
																					"line": 48,
																					"character": 7
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "IButtonProps",
																				"id": 455
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Variables",
																			"kind": 32,
																			"children": [
																				468,
																				469
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "components/Button/Button.tsx",
																			"line": 46,
																			"character": 12
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 462,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Size variations of the Button"
							},
							"sources": [
								{
									"fileName": "components/Button/Button.tsx",
									"line": 43,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "short"
									},
									{
										"type": "stringLiteral",
										"value": "small"
									},
									{
										"type": "stringLiteral",
										"value": "large"
									}
								]
							}
						},
						{
							"id": 470,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Form element type variations of Button. Passed through to DOM Button.",
								"tags": [
									{
										"tag": "default",
										"text": "\"button\"\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "components/Button/Button.tsx",
									"line": 59,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "submit"
									},
									{
										"type": "stringLiteral",
										"value": "reset"
									},
									{
										"type": "stringLiteral",
										"value": "button"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								460,
								458,
								459,
								457,
								456,
								461,
								463,
								462,
								470
							]
						}
					],
					"sources": [
						{
							"fileName": "components/Button/Button.tsx",
							"line": 11,
							"character": 22
						}
					]
				},
				{
					"id": 484,
					"name": "Button",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "Test Button description"
					},
					"sources": [
						{
							"fileName": "components/Button/Button.tsx",
							"line": 63,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "ICreateClassComponentClass",
						"id": 382,
						"typeArguments": [
							{
								"type": "reference",
								"name": "IButtonProps",
								"id": 455
							}
						]
					},
					"defaultValue": " createClass<IButtonProps, {}>({\n\tdisplayName: 'Button',\n\n\tstatics: {\n\t\tpeek: {\n\t\t\tdescription: `\n\t\t\t\tA basic button. Any props that are not explicitly called out below will\n\t\t\t\tbe passed through to the native \\`button\\` component.\n\t\t\t`,\n\t\t\tcategories: ['controls', 'buttons'],\n\t\t},\n\t},\n\n\tpropName: 'Button',\n\n\tpropTypes: {\n\t\tisDisabled: bool`\n\t\t\tDisables the Button by greying it out\n\t\t`,\n\n\t\tisActive: bool`\n\t\t\tActivates the Button by giving it a \"pressed down\" look\n\t\t`,\n\n\t\tclassName: string`\n\t\t\tClass names that are appended to the defaults\n\t\t`,\n\n\t\thasOnlyIcon: bool`\n\t\t\tSet this to \\`true\\` if you want the Button to only contain an icon.\n\t\t`,\n\n\t\tchildren: oneOfType([node, arrayOf(node)])`\n\t\t\tAny valid React children\n\t\t`,\n\n\t\tkind: oneOf(['primary', 'link', 'danger', 'invisible'])`\n\t\t\tStyle variations of the Button\n\t\t`,\n\n\t\tsize: oneOf(['short', 'small', 'large'])`\n\t\t\tSize variations of the Button\n\t\t`,\n\n\t\tonClick: func`\n\t\t\tCalled when the user clicks the \\`Button\\`.\n\t\t`,\n\n\t\ttype: string`\n\t\t\tForm element type variations of Button. Passed through to DOM Button.\n\t\t`,\n\t},\n\n\tgetDefaultProps() {\n\t\treturn {\n\t\t\tisDisabled: false,\n\t\t\tisActive: false,\n\t\t\tonClick: _.noop,\n\t\t\ttype: 'button',\n\t\t\thasOnlyIcon: false,\n\t\t};\n\t},\n\n\thandleClick(event: React.MouseEventHandler<HTMLButtonElement>) {\n\t\tconst { isDisabled, onClick } = this.props;\n\n\t\tif (!isDisabled) {\n\t\t\t// required to correctly apply the focus state in Safari and Firefox\n\t\t\t// (still valid 2019-07-22)\n\t\t\tthis.buttonRef.focus();\n\t\t\tonClick({ event, props: this.props });\n\t\t}\n\t},\n\n\trender() {\n\t\tconst {\n\t\t\tisDisabled,\n\t\t\tisActive,\n\t\t\thasOnlyIcon,\n\t\t\tkind,\n\t\t\tsize,\n\t\t\tclassName,\n\t\t\tchildren,\n\t\t\ttype,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\n\t\treturn (\n\t\t\t<button\n\t\t\t\t{...omitProps(passThroughs, Button, ['callbackId'])}\n\t\t\t\tref={ref => {\n\t\t\t\t\tthis.buttonRef = ref;\n\t\t\t\t}}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'&',\n\t\t\t\t\t{\n\t\t\t\t\t\t'&-is-disabled': isDisabled,\n\t\t\t\t\t\t'&-is-active': isActive,\n\t\t\t\t\t\t'&-primary': kind === 'primary',\n\t\t\t\t\t\t'&-link': kind === 'link',\n\t\t\t\t\t\t'&-invisible': kind === 'invisible',\n\t\t\t\t\t\t'&-danger': kind === 'danger',\n\t\t\t\t\t\t'&-short': size === 'short',\n\t\t\t\t\t\t'&-small': size === 'small',\n\t\t\t\t\t\t'&-large': size === 'large',\n\t\t\t\t\t\t'&-has-only-icon': hasOnlyIcon,\n\t\t\t\t\t},\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\tonClick={this.handleClick}\n\t\t\t\tdisabled={isDisabled}\n\t\t\t\ttype={type}\n\t\t\t>\n\t\t\t\t<span className={cx('&-content')}>{children}</span>\n\t\t\t</button>\n\t\t);\n\t},\n})"
				},
				{
					"id": 477,
					"name": "arrayOf",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Button/Button.tsx",
							"line": 9,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 478,
					"name": "bool",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Button/Button.tsx",
							"line": 9,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 471,
					"name": "cx",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "components/Button/Button.tsx",
							"line": 7,
							"character": 8
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "cx"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 472,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 473,
											"name": "bind",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 474,
													"name": "bind",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 475,
															"name": "nextValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															},
															"defaultValue": " value"
														},
														{
															"id": 476,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intersection",
														"types": [
															{
																"type": "reference",
																"name": "cx"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "util/style-helpers.ts",
													"line": 28,
													"character": 6
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												473
											]
										}
									]
								}
							}
						]
					},
					"defaultValue": " lucidClassNames.bind('&-Button')"
				},
				{
					"id": 479,
					"name": "func",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Button/Button.tsx",
							"line": 9,
							"character": 27
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 480,
					"name": "node",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Button/Button.tsx",
							"line": 9,
							"character": 33
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 481,
					"name": "oneOf",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Button/Button.tsx",
							"line": 9,
							"character": 40
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 482,
					"name": "oneOfType",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Button/Button.tsx",
							"line": 9,
							"character": 51
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 483,
					"name": "string",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Button/Button.tsx",
							"line": 9,
							"character": 59
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						455
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						484,
						477,
						478,
						471,
						479,
						480,
						481,
						482,
						483
					]
				}
			],
			"sources": [
				{
					"fileName": "components/Button/Button.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 490,
			"name": "\"components/Collapsible/Collapsible\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/components/Collapsible/Collapsible.tsx",
			"children": [
				{
					"id": 491,
					"name": "ICollapsibleProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 492,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Expandable content."
							},
							"sources": [
								{
									"fileName": "components/Collapsible/Collapsible.tsx",
									"line": 15,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "React.ReactNode"
							}
						},
						{
							"id": 493,
							"name": "className",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Appended to the component-specific class names set on the root element."
							},
							"sources": [
								{
									"fileName": "components/Collapsible/Collapsible.tsx",
									"line": 18,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 495,
							"name": "isAnimated",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Show an animated transition for alternating values of \\`isExpanded\\`."
							},
							"sources": [
								{
									"fileName": "components/Collapsible/Collapsible.tsx",
									"line": 29,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 494,
							"name": "isExpanded",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates that the component is in the \"expanded\" state when true and in\nthe \"unexpanded\" state when false."
							},
							"sources": [
								{
									"fileName": "components/Collapsible/Collapsible.tsx",
									"line": 24,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 496,
							"name": "isMountControlled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If true, do not render children when fully collapsed."
							},
							"sources": [
								{
									"fileName": "components/Collapsible/Collapsible.tsx",
									"line": 34,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 497,
							"name": "mountControlThreshold",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If \\`isMountControlled\\` is true, this value sets is the minimum height\nthe container needs to reach to not render any children."
							},
							"sources": [
								{
									"fileName": "components/Collapsible/Collapsible.tsx",
									"line": 40,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 498,
							"name": "rootType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Pass in a custom root element type."
							},
							"sources": [
								{
									"fileName": "components/Collapsible/Collapsible.tsx",
									"line": 45,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								492,
								493,
								495,
								494,
								496,
								497,
								498
							]
						}
					],
					"sources": [
						{
							"fileName": "components/Collapsible/Collapsible.tsx",
							"line": 13,
							"character": 34
						}
					]
				},
				{
					"id": 510,
					"name": "Collapsible",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "components/Collapsible/Collapsible.tsx",
							"line": 48,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "ICreateClassComponentClass",
						"id": 382,
						"typeArguments": [
							{
								"type": "reference",
								"name": "ICollapsibleProps",
								"id": 491
							}
						]
					},
					"defaultValue": " createClass<ICollapsibleProps, {}>({\n\tdisplayName: 'Collapsible',\n\n\tstatics: {\n\t\tpeek: {\n\t\t\tdescription: `\n\t\t\t\tThis is a simple container that can render content as expanded or\n\t\t\t\tcollapsed.\n\t\t\t`,\n\t\t\tcategories: ['utility'],\n\t\t},\n\t},\n\n\t_isPrivate: true,\n\n\tpropTypes: {\n\t\tchildren: node`\n\t\t\tExpandable content.\n\t\t`,\n\n\t\tclassName: string`\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t`,\n\n\t\tisExpanded: bool`\n\t\t\tIndicates that the component is in the \"expanded\" state when true and in\n\t\t\tthe \"unexpanded\" state when false.\n\t\t`,\n\n\t\tisAnimated: bool`\n\t\t\tShow an animated transition for alternating values of \\`isExpanded\\`.\n\t\t`,\n\n\t\tisMountControlled: bool`\n\t\t\tIf true, do not render children when fully collapsed.\n\t\t`,\n\n\t\tmountControlThreshold: number`\n\t\t\tIf \\`isMountControlled\\` is true, this value sets is the minimum height\n\t\t\tthe container needs to reach to not render any children.\n\t\t`,\n\n\t\trootType: any`\n\t\t\tPass in a custom root element type.\n\t\t`,\n\t},\n\n\tgetDefaultProps() {\n\t\treturn {\n\t\t\tisExpanded: true,\n\t\t\tisAnimated: true,\n\t\t\tisMountControlled: true,\n\t\t\tmountControlThreshold: 4,\n\t\t\trootType: 'div',\n\t\t};\n\t},\n\n\tgetInitialState() {\n\t\treturn {\n\t\t\tmaxHeight: null,\n\t\t};\n\t},\n\n\tcomponentWillMount() {\n\t\tthis.isAnimated = false;\n\t\tthis.delayTimer = null;\n\t},\n\n\tcomponentDidMount() {\n\t\t_.delay(() => {\n\t\t\tthis.setState({\n\t\t\t\tmaxHeight: _.get(this, 'rootRef.scrollHeight'),\n\t\t\t});\n\t\t\tthis.isAnimated = this.props.isAnimated;\n\t\t}, 32);\n\t},\n\n\tcomponentDidUpdate() {\n\t\tthis.isAnimated = false;\n\t\tthis.delayTimer = _.delay(() => {\n\t\t\tif (this.props.isExpanded) {\n\t\t\t\tconst maxHeight = _.get(this, 'rootRef.scrollHeight');\n\t\t\t\tif (maxHeight !== this.state.maxHeight) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tmaxHeight,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.isAnimated = this.props.isAnimated;\n\t\t}, 32);\n\t},\n\n\tcomponentWillUnmount() {\n\t\tthis.delayTimer && clearTimeout(this.delayTimer);\n\t},\n\n\trender() {\n\t\tconst {\n\t\t\tchildren,\n\t\t\tclassName,\n\t\t\tisExpanded,\n\t\t\tisMountControlled,\n\t\t\tmountControlThreshold,\n\t\t\trootType,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\n\t\tconst { maxHeight } = this.state;\n\n\t\treturn (\n\t\t\t<Motion\n\t\t\t\tstyle={\n\t\t\t\t\tthis.isAnimated\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\theight:\n\t\t\t\t\t\t\t\t\tisExpanded && !_.isNull(maxHeight)\n\t\t\t\t\t\t\t\t\t\t? spring(maxHeight, QUICK_SLIDE_MOTION)\n\t\t\t\t\t\t\t\t\t\t: spring(0, QUICK_SLIDE_MOTION),\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\theight: isExpanded && !_.isNull(maxHeight) ? maxHeight : 0,\n\t\t\t\t\t\t  }\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tween =>\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\trootType,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...omitProps(passThroughs, Collapsible),\n\t\t\t\t\t\t\tref: (ref: any) => (this.rootRef = ref),\n\t\t\t\t\t\t\tclassName: cx('&', className),\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\theight:\n\t\t\t\t\t\t\t\t\ttween.height !== maxHeight\n\t\t\t\t\t\t\t\t\t\t? tween.height < 0\n\t\t\t\t\t\t\t\t\t\t\t? 0\n\t\t\t\t\t\t\t\t\t\t\t: tween.height\n\t\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\t\t\t\tpadding: 0,\n\t\t\t\t\t\t\t\t...passThroughs.style,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey='content'\n\t\t\t\t\t\t\t\tclassName={cx('&-content')}\n\t\t\t\t\t\t\t\tstyle={{ margin: 0 }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{isMountControlled && !isExpanded\n\t\t\t\t\t\t\t\t\t? _.isNull(maxHeight) ||\n\t\t\t\t\t\t\t\t\t  Math.abs(tween.height) > mountControlThreshold\n\t\t\t\t\t\t\t\t\t\t? children\n\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t: children}\n\t\t\t\t\t\t\t</div>,\n\t\t\t\t\t\t]\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</Motion>\n\t\t);\n\t},\n})"
				},
				{
					"id": 505,
					"name": "any",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Collapsible/Collapsible.tsx",
							"line": 11,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 506,
					"name": "bool",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Collapsible/Collapsible.tsx",
							"line": 11,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 499,
					"name": "cx",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "components/Collapsible/Collapsible.tsx",
							"line": 9,
							"character": 8
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "cx"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 500,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 501,
											"name": "bind",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 502,
													"name": "bind",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 503,
															"name": "nextValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															},
															"defaultValue": " value"
														},
														{
															"id": 504,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intersection",
														"types": [
															{
																"type": "reference",
																"name": "cx"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "util/style-helpers.ts",
													"line": 28,
													"character": 6
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												501
											]
										}
									]
								}
							}
						]
					},
					"defaultValue": " lucidClassNames.bind('&-Collapsible')"
				},
				{
					"id": 507,
					"name": "node",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Collapsible/Collapsible.tsx",
							"line": 11,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 508,
					"name": "number",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Collapsible/Collapsible.tsx",
							"line": 11,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 509,
					"name": "string",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Collapsible/Collapsible.tsx",
							"line": 11,
							"character": 39
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						491
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						510,
						505,
						506,
						499,
						507,
						508,
						509
					]
				}
			],
			"sources": [
				{
					"fileName": "components/Collapsible/Collapsible.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 591,
			"name": "\"components/Expander/Expander\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/components/Expander/Expander.tsx",
			"children": [
				{
					"id": 595,
					"name": "IExpanderAdditionalLabelProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 597,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "components/Expander/Expander.tsx",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "React.ReactNode"
							}
						},
						{
							"id": 596,
							"name": "description",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "components/Expander/Expander.tsx",
									"line": 22,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								597,
								596
							]
						}
					],
					"sources": [
						{
							"fileName": "components/Expander/Expander.tsx",
							"line": 21,
							"character": 39
						}
					]
				},
				{
					"id": 592,
					"name": "IExpanderLabelProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 594,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "components/Expander/Expander.tsx",
									"line": 18,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "React.ReactNode"
							}
						},
						{
							"id": 593,
							"name": "description",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "components/Expander/Expander.tsx",
									"line": 17,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								594,
								593
							]
						}
					],
					"sources": [
						{
							"fileName": "components/Expander/Expander.tsx",
							"line": 16,
							"character": 29
						}
					]
				},
				{
					"id": 598,
					"name": "IExpanderProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 612,
							"name": "AdditionalLabelContent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Child element whose children respresent content to be shown inside\nExpander.Label and to the right of it"
							},
							"sources": [
								{
									"fileName": "components/Expander/Expander.tsx",
									"line": 58,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "React.ReactNode"
							}
						},
						{
							"id": 611,
							"name": "Label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Child element whose children represents content to be shown next to the\nexpander icon."
							},
							"sources": [
								{
									"fileName": "components/Expander/Expander.tsx",
									"line": 53,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "React.ReactNode"
							}
						},
						{
							"id": 599,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Expandable content."
							},
							"sources": [
								{
									"fileName": "components/Expander/Expander.tsx",
									"line": 28,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "React.ReactNode"
							}
						},
						{
							"id": 600,
							"name": "className",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Appended to the component-specific class names set on the root element."
							},
							"sources": [
								{
									"fileName": "components/Expander/Expander.tsx",
									"line": 31,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 601,
							"name": "isExpanded",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates that the component is in the \"expanded\" state when true and in\nthe \"unexpanded\" state when false."
							},
							"sources": [
								{
									"fileName": "components/Expander/Expander.tsx",
									"line": 37,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 613,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Renders different variants of Expander. 'simple' is default.\n'highlighted' is more prominant."
							},
							"sources": [
								{
									"fileName": "components/Expander/Expander.tsx",
									"line": 63,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "simple"
									},
									{
										"type": "stringLiteral",
										"value": "highlighted"
									}
								]
							}
						},
						{
							"id": 602,
							"name": "onToggle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Called when the user clicks on the component's header."
							},
							"sources": [
								{
									"fileName": "components/Expander/Expander.tsx",
									"line": 42,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 603,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 604,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 605,
															"name": "isExpanded",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 606,
															"name": "__namedParameters",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"originalName": "__1",
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 607,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 608,
																			"name": "event",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "components/Expander/Expander.tsx",
																					"line": 44,
																					"character": 9
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "bivarianceHack"
																			}
																		},
																		{
																			"id": 609,
																			"name": "props",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "components/Expander/Expander.tsx",
																					"line": 44,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "IExpanderProps",
																				"id": 598
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Variables",
																			"kind": 32,
																			"children": [
																				608,
																				609
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "components/Expander/Expander.tsx",
																			"line": 43,
																			"character": 22
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 610,
							"name": "style",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Passed through to the root element."
							},
							"sources": [
								{
									"fileName": "components/Expander/Expander.tsx",
									"line": 48,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "React.CSSProperties"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								612,
								611,
								599,
								600,
								601,
								613,
								602,
								610
							]
						}
					],
					"sources": [
						{
							"fileName": "components/Expander/Expander.tsx",
							"line": 26,
							"character": 31
						}
					]
				},
				{
					"id": 614,
					"name": "IExpanderState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 615,
							"name": "isExpanded",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "components/Expander/Expander.tsx",
									"line": 67,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								615
							]
						}
					],
					"sources": [
						{
							"fileName": "components/Expander/Expander.tsx",
							"line": 66,
							"character": 31
						}
					]
				},
				{
					"id": 629,
					"name": "Expander",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "components/Expander/Expander.tsx",
							"line": 70,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "ICreateClassComponentClass",
						"id": 382,
						"typeArguments": [
							{
								"type": "reference",
								"name": "IExpanderProps",
								"id": 598
							}
						]
					},
					"defaultValue": " createClass<IExpanderProps, IExpanderState>({\n\tdisplayName: 'Expander',\n\n\tstatics: {\n\t\tpeek: {\n\t\t\tdescription: `\n\t\t\t\tThis is a container that provides a toggle that controls when the\n\t\t\t\tcontent is shown.\n\t\t\t`,\n\t\t\tcategories: ['layout'],\n\t\t\tmadeFrom: ['ChevronIcon'],\n\t\t},\n\t},\n\n\tcomponents: {\n\t\tLabel: createClass<IExpanderLabelProps, {}>({\n\t\t\tdisplayName: 'Expander.Label',\n\t\t\tstatics: {\n\t\t\t\tpeek: {\n\t\t\t\t\tdescription: `\n\t\t\t\t\t\tRenders a \\`<span>\\` to be shown next to the expander icon.\n\t\t\t\t\t`,\n\t\t\t\t},\n\t\t\t},\n\t\t\tpropName: 'Label',\n\t\t\tpropTypes: {\n\t\t\t\tchildren: node`\n\t\t\t\t\tUsed to identify the purpose of this switch to the user -- can be any\n\t\t\t\t\trenderable content.\n\t\t\t\t`,\n\t\t\t},\n\t\t}),\n\t\tAdditionalLabelContent: createClass<IExpanderAdditionalLabelProps, {}>({\n\t\t\tdisplayName: 'Expander.AdditionalLabelContent',\n\t\t\tstatics: {\n\t\t\t\tpeek: {\n\t\t\t\t\tdescription: `\n\t\t\t\t\t\tRenders a \\`<span>\\` to be shown next to the expander label.\n\t\t\t\t\t`,\n\t\t\t\t},\n\t\t\t},\n\t\t\tpropName: 'AdditionalLabelContent',\n\t\t\tpropTypes: {\n\t\t\t\tchildren: node`\n\t\t\t\t\tUsed to display additional information or/and actions next to expander label.\n\t\t\t\t`,\n\t\t\t},\n\t\t}),\n\t},\n\n\treducers,\n\n\tpropTypes: {\n\t\tchildren: node`\n\t\t\tExpandable content.\n\t\t`,\n\n\t\tclassName: string`\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t`,\n\n\t\tisExpanded: bool`\n\t\t\tIndicates that the component is in the \"expanded\" state when true and in\n\t\t\tthe \"unexpanded\" state when false.\n\t\t`,\n\n\t\tonToggle: func`\n\t\t\tCalled when the user clicks on the component's header.  Signature:\n\t\t\t\\`(isExpanded, { event, props }) => {}\\`\n\t\t`,\n\n\t\tstyle: object`\n\t\t\tPassed through to the root element.\n\t\t`,\n\n\t\tLabel: any`\n\t\t\tChild element whose children represents content to be shown next to the\n\t\t\texpander icon.\n\t\t`,\n\n\t\tAdditionalLabelContent: node`\n\t\t\tChild element whose children respresent content to be shown inside\n\t\t\tExpander.Label and to the right of it\n\t\t`,\n\n\t\tkind: oneOf(['simple', 'highlighted'])`\n\t\t\tRenders different variants of Expander. 'simple' is default.\n\t\t\t'highlighted' is more prominant.\n\t\t`,\n\t},\n\n\tgetDefaultProps() {\n\t\treturn {\n\t\t\tisExpanded: false,\n\t\t\tonToggle: _.noop,\n\t\t\tkind: 'simple',\n\t\t};\n\t},\n\n\trender() {\n\t\tconst {\n\t\t\tchildren,\n\t\t\tclassName,\n\t\t\tisExpanded,\n\t\t\tstyle,\n\t\t\tkind,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\n\t\tconst labelChildProp = _.first(\n\t\t\t_.map(findTypes(this.props, Expander.Label), 'props')\n\t\t);\n\n\t\tconst additionalLabelContentChildProp = _.first(\n\t\t\t_.map(findTypes(this.props, Expander.AdditionalLabelContent), 'props')\n\t\t);\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...omitProps(passThroughs, Expander)}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'&',\n\t\t\t\t\t{\n\t\t\t\t\t\t'&-is-expanded': isExpanded,\n\t\t\t\t\t\t'&-kind-highlighted': kind === 'highlighted',\n\t\t\t\t\t},\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\tstyle={style}\n\t\t\t>\n\t\t\t\t<header className={cx('&-header')}>\n\t\t\t\t\t<div className={cx('&-header-toggle')} onClick={this.handleToggle}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName={cx('&-icon')}\n\t\t\t\t\t\t\tkind='invisible'\n\t\t\t\t\t\t\thasOnlyIcon={true}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ChevronIcon direction={isExpanded ? 'up' : 'down'} />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t{labelChildProp && (\n\t\t\t\t\t\t\t<span className={cx('&-text')}>{labelChildProp.children}</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t{additionalLabelContentChildProp && (\n\t\t\t\t\t\t<div className={cx('&-additional-content')}>\n\t\t\t\t\t\t\t{additionalLabelContentChildProp.children}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</header>\n\t\t\t\t<Collapsible\n\t\t\t\t\tisExpanded={isExpanded}\n\t\t\t\t\trootType='section'\n\t\t\t\t\tclassName={cx('&-content')}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</Collapsible>\n\t\t\t</div>\n\t\t);\n\t},\n\n\thandleToggle(event: React.MouseEventHandler) {\n\t\tthis.props.onToggle(!this.props.isExpanded, {\n\t\t\tevent,\n\t\t\tprops: this.props,\n\t\t});\n\t},\n})"
				},
				{
					"id": 622,
					"name": "any",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Expander/Expander.tsx",
							"line": 14,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 623,
					"name": "bool",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Expander/Expander.tsx",
							"line": 14,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 616,
					"name": "cx",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "components/Expander/Expander.tsx",
							"line": 12,
							"character": 8
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "cx"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 617,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 618,
											"name": "bind",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 619,
													"name": "bind",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 620,
															"name": "nextValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															},
															"defaultValue": " value"
														},
														{
															"id": 621,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intersection",
														"types": [
															{
																"type": "reference",
																"name": "cx"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "util/style-helpers.ts",
													"line": 28,
													"character": 6
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												618
											]
										}
									]
								}
							}
						]
					},
					"defaultValue": " lucidClassNames.bind('&-Expander')"
				},
				{
					"id": 624,
					"name": "func",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Expander/Expander.tsx",
							"line": 14,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 625,
					"name": "node",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Expander/Expander.tsx",
							"line": 14,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 626,
					"name": "object",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Expander/Expander.tsx",
							"line": 14,
							"character": 37
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 627,
					"name": "oneOf",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Expander/Expander.tsx",
							"line": 14,
							"character": 44
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 628,
					"name": "string",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Expander/Expander.tsx",
							"line": 14,
							"character": 52
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						595,
						592,
						598,
						614
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						629,
						622,
						623,
						616,
						624,
						625,
						626,
						627,
						628
					]
				}
			],
			"sources": [
				{
					"fileName": "components/Expander/Expander.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 630,
			"name": "\"components/Expander/Expander.reducers\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/components/Expander/Expander.reducers.ts",
			"children": [
				{
					"id": 631,
					"name": "onToggle",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 632,
							"name": "onToggle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 633,
									"name": "state",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IExpanderState",
										"id": 614
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IExpanderState",
								"id": 614
							}
						}
					],
					"sources": [
						{
							"fileName": "components/Expander/Expander.reducers.ts",
							"line": 3,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						631
					]
				}
			],
			"sources": [
				{
					"fileName": "components/Expander/Expander.reducers.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 558,
			"name": "\"components/Icon/ChevronIcon/ChevronIcon\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/components/Icon/ChevronIcon/ChevronIcon.tsx",
			"children": [
				{
					"id": 559,
					"name": "IChevronIconProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 564,
							"name": "aspectRatio",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid SVG aspect ratio."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 35,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "IIconProps.aspectRatio",
								"id": 526
							}
						},
						{
							"id": 581,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid React children"
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 62,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "React.ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "IIconProps.children",
								"id": 543
							}
						},
						{
							"id": 561,
							"name": "className",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Classes that are appended to the component defaults. This prop is run through the \\`classnames\\` library."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 26,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "IIconProps.className",
								"id": 523
							}
						},
						{
							"id": 582,
							"name": "color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Sets the color of the Icon.  May not be applicable for icons that are tied to specific colors (e.g. DangerIcon)."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 65,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "Colors",
								"id": 512
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "IIconProps.color",
								"id": 544
							}
						},
						{
							"id": 560,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "components/Icon/ChevronIcon/ChevronIcon.tsx",
									"line": 13,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "up"
									},
									{
										"type": "stringLiteral",
										"value": "down"
									},
									{
										"type": "stringLiteral",
										"value": "left"
									},
									{
										"type": "stringLiteral",
										"value": "right"
									}
								]
							}
						},
						{
							"id": 565,
							"name": "isClickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling that makes the icon appear clickable."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 38,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "IIconProps.isClickable",
								"id": 527
							}
						},
						{
							"id": 566,
							"name": "isDisabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling that makes the icon appear disabled.  Also forces isClickable to be false."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 41,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "IIconProps.isDisabled",
								"id": 528
							}
						},
						{
							"id": 567,
							"name": "onClick",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Called when the user clicks the \\`Icon\\`."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 44,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 568,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 569,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 570,
															"name": "__namedParameters",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"originalName": "__0",
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 571,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 572,
																			"name": "event",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "components/Icon/Icon.tsx",
																					"line": 45,
																					"character": 7
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "bivarianceHack"
																			}
																		},
																		{
																			"id": 573,
																			"name": "props",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "components/Icon/Icon.tsx",
																					"line": 46,
																					"character": 7
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "IIconProps",
																				"id": 522
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Variables",
																			"kind": 32,
																			"children": [
																				572,
																				573
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "components/Icon/Icon.tsx",
																			"line": 44,
																			"character": 12
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "IIconProps.onClick",
								"id": 529
							}
						},
						{
							"id": 574,
							"name": "onSelect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Called when the user clicks an active, clickable \\`Icon\\`. Signature: \\`({event, props}) => {}\\`"
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 53,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 575,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 576,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 577,
															"name": "__namedParameters",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"originalName": "__0",
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 578,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 579,
																			"name": "event",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "components/Icon/Icon.tsx",
																					"line": 54,
																					"character": 7
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "bivarianceHack"
																			}
																		},
																		{
																			"id": 580,
																			"name": "props",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "components/Icon/Icon.tsx",
																					"line": 55,
																					"character": 7
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "IIconProps",
																				"id": 522
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Variables",
																			"kind": 32,
																			"children": [
																				579,
																				580
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "components/Icon/Icon.tsx",
																			"line": 53,
																			"character": 13
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "IIconProps.onSelect",
								"id": 536
							}
						},
						{
							"id": 562,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Size variations of the icons. \\`size\\` directly effects height and width but the developer should also be conscious of the relationship with \\`viewBox\\`."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 29,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "IIconProps.size",
								"id": 524
							}
						},
						{
							"id": 563,
							"name": "viewBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "\\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as the \"artboard\" for our SVG while \\`size\\` is the presented height and width."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 32,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "IIconProps.viewBox",
								"id": 525
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								564,
								581,
								561,
								582,
								560,
								565,
								566,
								567,
								574,
								562,
								563
							]
						}
					],
					"sources": [
						{
							"fileName": "components/Icon/ChevronIcon/ChevronIcon.tsx",
							"line": 12,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "IIconProps",
							"id": 522
						}
					]
				},
				{
					"id": 590,
					"name": "ChevronIcon",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "components/Icon/ChevronIcon/ChevronIcon.tsx",
							"line": 16,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "ICreateClassComponentClass",
						"id": 382,
						"typeArguments": [
							{
								"type": "reference",
								"name": "IChevronIconProps",
								"id": 559
							}
						]
					},
					"defaultValue": " createClass<IChevronIconProps, {}>({\n\tdisplayName: 'ChevronIcon',\n\n\tstatics: {\n\t\tpeek: {\n\t\t\tdescription: `\n\t\t\t\tA chevron icon.\n\t\t\t`,\n\t\t\tcategories: ['visual design', 'icons'],\n\t\t\textend: 'Icon',\n\t\t\tmadeFrom: ['Icon'],\n\t\t},\n\t},\n\n\tpropTypes: {\n\t\t...Icon.propTypes,\n\t\tdirection: oneOf(['up', 'down', 'left', 'right'])`\n\t\t\tdirection variations of the icon\n\t\t`,\n\t},\n\n\tgetDefaultProps() {\n\t\treturn {\n\t\t\tdirection: 'down',\n\t\t};\n\t},\n\n\trender() {\n\t\tconst { className, direction, ...passThroughs } = this.props;\n\n\t\treturn (\n\t\t\t<Icon\n\t\t\t\t{...omitProps(passThroughs, ChevronIcon, [], false)}\n\t\t\t\t{..._.pick(passThroughs, _.keys(Icon.propTypes))}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'&',\n\t\t\t\t\t{\n\t\t\t\t\t\t'&-is-down': direction === 'down',\n\t\t\t\t\t\t'&-is-up': direction === 'up',\n\t\t\t\t\t\t'&-is-left': direction === 'left',\n\t\t\t\t\t\t'&-is-right': direction === 'right',\n\t\t\t\t\t},\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<path d='M.5 4.5l7.5 7 7.5-7' />\n\t\t\t</Icon>\n\t\t);\n\t},\n})"
				},
				{
					"id": 583,
					"name": "cx",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "components/Icon/ChevronIcon/ChevronIcon.tsx",
							"line": 8,
							"character": 8
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "cx"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 584,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 585,
											"name": "bind",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 586,
													"name": "bind",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 587,
															"name": "nextValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															},
															"defaultValue": " value"
														},
														{
															"id": 588,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intersection",
														"types": [
															{
																"type": "reference",
																"name": "cx"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "util/style-helpers.ts",
													"line": 28,
													"character": 6
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												585
											]
										}
									]
								}
							}
						]
					},
					"defaultValue": " lucidClassNames.bind('&-ChevronIcon')"
				},
				{
					"id": 589,
					"name": "oneOf",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Icon/ChevronIcon/ChevronIcon.tsx",
							"line": 10,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						559
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						590,
						583,
						589
					]
				}
			],
			"sources": [
				{
					"fileName": "components/Icon/ChevronIcon/ChevronIcon.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 511,
			"name": "\"components/Icon/Icon\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/components/Icon/Icon.tsx",
			"children": [
				{
					"id": 512,
					"name": "Colors",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"children": [
						{
							"id": 513,
							"name": "COLOR_NEUTRAL_DARK",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 11,
									"character": 19
								}
							],
							"defaultValue": "\"neutral-dark\""
						},
						{
							"id": 514,
							"name": "COLOR_NEUTRAL_LIGHT",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 12,
									"character": 20
								}
							],
							"defaultValue": "\"neutral-light\""
						},
						{
							"id": 515,
							"name": "COLOR_PRIMARY",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 13,
									"character": 14
								}
							],
							"defaultValue": "\"primary\""
						},
						{
							"id": 519,
							"name": "COLOR_SECONDARY_ONE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 17,
									"character": 20
								}
							],
							"defaultValue": "\"secondary-one\""
						},
						{
							"id": 521,
							"name": "COLOR_SECONDARY_THREE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 19,
									"character": 22
								}
							],
							"defaultValue": "\"secondary-three\""
						},
						{
							"id": 520,
							"name": "COLOR_SECONDARY_TWO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 18,
									"character": 20
								}
							],
							"defaultValue": "\"secondary-two\""
						},
						{
							"id": 517,
							"name": "COLOR_SUCCESS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 15,
									"character": 14
								}
							],
							"defaultValue": "\"success\""
						},
						{
							"id": 518,
							"name": "COLOR_WARNING",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 16,
									"character": 14
								}
							],
							"defaultValue": "\"warning\""
						},
						{
							"id": 516,
							"name": "COLOR_WHITE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 14,
									"character": 12
								}
							],
							"defaultValue": "\"white\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								513,
								514,
								515,
								519,
								521,
								520,
								517,
								518,
								516
							]
						}
					],
					"sources": [
						{
							"fileName": "components/Icon/Icon.tsx",
							"line": 10,
							"character": 11
						}
					]
				},
				{
					"id": 522,
					"name": "IIconProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 526,
							"name": "aspectRatio",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid SVG aspect ratio."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 35,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 543,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid React children"
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 62,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "React.ReactNode"
							}
						},
						{
							"id": 523,
							"name": "className",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Classes that are appended to the component defaults. This prop is run through the \\`classnames\\` library."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 26,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 544,
							"name": "color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Sets the color of the Icon.  May not be applicable for icons that are tied to specific colors (e.g. DangerIcon)."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 65,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "Colors",
								"id": 512
							}
						},
						{
							"id": 527,
							"name": "isClickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling that makes the icon appear clickable."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 38,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 528,
							"name": "isDisabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling that makes the icon appear disabled.  Also forces isClickable to be false."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 41,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 529,
							"name": "onClick",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Called when the user clicks the \\`Icon\\`."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 44,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 530,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 531,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 532,
															"name": "__namedParameters",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"originalName": "__0",
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 533,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 534,
																			"name": "event",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "components/Icon/Icon.tsx",
																					"line": 45,
																					"character": 7
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "bivarianceHack"
																			}
																		},
																		{
																			"id": 535,
																			"name": "props",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "components/Icon/Icon.tsx",
																					"line": 46,
																					"character": 7
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "IIconProps",
																				"id": 522
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Variables",
																			"kind": 32,
																			"children": [
																				534,
																				535
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "components/Icon/Icon.tsx",
																			"line": 44,
																			"character": 12
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 536,
							"name": "onSelect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Called when the user clicks an active, clickable \\`Icon\\`. Signature: \\`({event, props}) => {}\\`"
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 53,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 537,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 538,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 539,
															"name": "__namedParameters",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"originalName": "__0",
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 540,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 541,
																			"name": "event",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "components/Icon/Icon.tsx",
																					"line": 54,
																					"character": 7
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "bivarianceHack"
																			}
																		},
																		{
																			"id": 542,
																			"name": "props",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "components/Icon/Icon.tsx",
																					"line": 55,
																					"character": 7
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "IIconProps",
																				"id": 522
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Variables",
																			"kind": 32,
																			"children": [
																				541,
																				542
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "components/Icon/Icon.tsx",
																			"line": 53,
																			"character": 13
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 524,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size variations of the icons. \\`size\\` directly effects height and width but the developer should also be conscious of the relationship with \\`viewBox\\`."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 29,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 525,
							"name": "viewBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "\\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as the \"artboard\" for our SVG while \\`size\\` is the presented height and width."
							},
							"sources": [
								{
									"fileName": "components/Icon/Icon.tsx",
									"line": 32,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								526,
								543,
								523,
								544,
								527,
								528,
								529,
								536,
								524,
								525
							]
						}
					],
					"sources": [
						{
							"fileName": "components/Icon/Icon.tsx",
							"line": 22,
							"character": 27
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "IChevronIconProps",
							"id": 559
						}
					]
				},
				{
					"id": 557,
					"name": "Icon",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "components/Icon/Icon.tsx",
							"line": 68,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ICreateClassComponentClass",
						"id": 382,
						"typeArguments": [
							{
								"type": "reference",
								"name": "IIconProps",
								"id": 522
							}
						]
					},
					"defaultValue": " createClass<IIconProps, {}>({\n\tdisplayName: 'Icon',\n\n\tstatics: {\n\t\tpeek: {\n\t\t\tdescription: `\n\t\t\t\tA basic svg icon. Any props that are not explicitly called out below\n\t\t\t\twill be passed through to the native \\`svg\\` component.\n\t\t\t`,\n\t\t\tcategories: ['visual design', 'icons'],\n\t\t},\n\t},\n\n\tpropTypes: {\n\t\tclassName: any`\n\t\t\tClasses that are appended to the component defaults. This prop is run\n\t\t\tthrough the \\`classnames\\` library.\n\t\t`,\n\n\t\tsize: number`\n\t\t\tSize variations of the icons. \\`size\\` directly effects height and width\n\t\t\tbut the developer should also be conscious of the relationship with\n\t\t\t\\`viewBox\\`.\n\t\t`,\n\n\t\tviewBox: string`\n\t\t\t\\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n\t\t\tthe \"artboard\" for our SVG while \\`size\\` is the presented height and\n\t\t\twidth.\n\t\t`,\n\n\t\taspectRatio: string`\n\t\t\tAny valid SVG aspect ratio.\n\t\t`,\n\n\t\tisClickable: bool`\n\t\t\tAdds styling that makes the icon appear clickable.\n\t\t`,\n\n\t\tisDisabled: bool`\n\t\t\tAdds styling that makes the icon appear disabled.  Also forces\n\t\t\tisClickable to be false.\n\t\t`,\n\n\t\tonClick: func`\n\t\t\tCalled when the user clicks the \\`Icon\\`. Signature:\n\t\t\t\\`({event, props}) => {}\\`\n\t\t`,\n\n\t\tonSelect: func`\n\t\t\tCalled when the user clicks an active, clickable \\`Icon\\`. Signature:\n\t\t\t\\`({event, props}) => {}\\`\n\t\t`,\n\n\t\tchildren: any`\n\t\t\tAny valid React children.\n\t\t`,\n\n\t\t// TODO: make sure react peek is a-okay with this craziness!\n\t\tcolor: oneOf(Colors)`\n\t\t\tSets the color of the Icon.  May not be applicable for icons that are tied\n\t\t\tto specific colors (e.g. DangerIcon).\n\t\t`,\n\t},\n\n\tgetDefaultProps() {\n\t\treturn {\n\t\t\tsize: 16,\n\t\t\taspectRatio: 'xMidYMid meet',\n\t\t\tviewBox: '0 0 16 16',\n\t\t\tisDisabled: false,\n\t\t\tisClickable: false,\n\t\t\tcolor: Colors.COLOR_PRIMARY,\n\t\t};\n\t},\n\n\thandleClick(event: React.MouseEventHandler<HTMLButtonElement>) {\n\t\tconst { onClick, isDisabled, isClickable, onSelect } = this.props;\n\n\t\tconst domNode = this.svgRef;\n\n\t\tif (onClick) {\n\t\t\tonClick(event);\n\t\t}\n\n\t\tif (onSelect && isClickable && !isDisabled) {\n\t\t\tdomNode.focus();\n\t\t\tonSelect({ event, props: this.props });\n\t\t}\n\t},\n\n\trender() {\n\t\tconst {\n\t\t\tclassName,\n\t\t\tchildren,\n\t\t\tcolor,\n\t\t\tsize,\n\t\t\tviewBox,\n\t\t\taspectRatio,\n\t\t\tisClickable,\n\t\t\tisDisabled,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\n\t\treturn (\n\t\t\t<svg\n\t\t\t\twidth={size}\n\t\t\t\theight={size}\n\t\t\t\tviewBox={viewBox}\n\t\t\t\tpreserveAspectRatio={aspectRatio}\n\t\t\t\t{...omitProps(passThroughs, Icon)}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'&',\n\t\t\t\t\t{\n\t\t\t\t\t\t[`&-color-${color}`]: true,\n\t\t\t\t\t\t'&-is-clickable': !isDisabled && isClickable,\n\t\t\t\t\t\t'&-is-disabled': isDisabled,\n\t\t\t\t\t},\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\tref={ref => (this.svgRef = ref)}\n\t\t\t\tonClick={this.handleClick}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</svg>\n\t\t);\n\t},\n})"
				},
				{
					"id": 551,
					"name": "any",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Icon/Icon.tsx",
							"line": 8,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 554,
					"name": "bool",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Icon/Icon.tsx",
							"line": 8,
							"character": 33
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 545,
					"name": "cx",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "components/Icon/Icon.tsx",
							"line": 6,
							"character": 8
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "cx"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 546,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 547,
											"name": "bind",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 548,
													"name": "bind",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 549,
															"name": "nextValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															},
															"defaultValue": " value"
														},
														{
															"id": 550,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intersection",
														"types": [
															{
																"type": "reference",
																"name": "cx"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "util/style-helpers.ts",
													"line": 28,
													"character": 6
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												547
											]
										}
									]
								}
							}
						]
					},
					"defaultValue": " lucidClassNames.bind('&-Icon')"
				},
				{
					"id": 555,
					"name": "func",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Icon/Icon.tsx",
							"line": 8,
							"character": 39
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 553,
					"name": "number",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Icon/Icon.tsx",
							"line": 8,
							"character": 27
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 556,
					"name": "oneOf",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Icon/Icon.tsx",
							"line": 8,
							"character": 46
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 552,
					"name": "string",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "components/Icon/Icon.tsx",
							"line": 8,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						512
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						522
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						557,
						551,
						554,
						545,
						555,
						553,
						556,
						552
					]
				}
			],
			"sources": [
				{
					"fileName": "components/Icon/Icon.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 634,
			"name": "\"components/ModernHybridDemo/ModernHybridDemo\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/components/ModernHybridDemo/ModernHybridDemo.tsx",
			"children": [
				{
					"id": 655,
					"name": "ModernHybridDemoDumb",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 668,
							"name": "SS",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 657,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 658,
									"name": "new ModernHybridDemoDumb",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 659,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IExpanderProps",
												"id": 638
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ModernHybridDemoDumb",
										"id": 655
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
									"line": 56,
									"character": 33
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.__constructor"
							}
						},
						{
							"id": 714,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.",
								"text": "```ts\nstatic contextType = MyContext\ncontext!: React.ContextType<typeof MyContext>\n```\n",
								"tags": [
									{
										"tag": "deprecated",
										"text": "if used without a type annotation, or without static contextType"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/legacy-context.html\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 433,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.context"
							}
						},
						{
							"id": 733,
							"name": "props",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 458,
									"character": 22
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "Readonly",
										"typeArguments": [
											{
												"type": "reference",
												"name": "IExpanderProps",
												"id": 638
											}
										]
									},
									{
										"type": "reference",
										"name": "Readonly",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 734,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 735,
															"name": "children",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
																	"line": 458,
																	"character": 57
																}
															],
															"type": {
																"type": "reference",
																"name": "ReactNode"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																735
															]
														}
													],
													"sources": [
														{
															"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
															"line": 458,
															"character": 47
														}
													]
												}
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.props"
							}
						},
						{
							"id": 737,
							"name": "refs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 464,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 738,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 739,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 740,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ReactInstance"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
											"line": 464,
											"character": 13
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.refs"
							}
						},
						{
							"id": 736,
							"name": "state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 459,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "Readonly",
								"typeArguments": [
									{
										"type": "reference",
										"name": "__type"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.state"
							}
						},
						{
							"id": 713,
							"name": "contextType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If set, `this.context` will be set at runtime to the current value of the given Context.",
								"text": "Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html#classcontexttype\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 418,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "Context",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.contextType"
							}
						},
						{
							"id": 656,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
									"line": 56,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Expander\""
						},
						{
							"id": 693,
							"name": "UNSAFE_componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 694,
									"name": "UNSAFE_componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 646,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
							}
						},
						{
							"id": 699,
							"name": "UNSAFE_componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 700,
									"name": "UNSAFE_componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 701,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "IExpanderProps",
														"id": 638
													}
												]
											}
										},
										{
											"id": 702,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 678,
									"character": 40
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
							}
						},
						{
							"id": 708,
							"name": "UNSAFE_componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 709,
									"name": "UNSAFE_componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 710,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "IExpanderProps",
														"id": 638
													}
												]
											}
										},
										{
											"id": 711,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "__type"
													}
												]
											}
										},
										{
											"id": 712,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 706,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
							}
						},
						{
							"id": 678,
							"name": "componentDidCatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 679,
									"name": "componentDidCatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."
									},
									"parameters": [
										{
											"id": 680,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 681,
											"name": "errorInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ErrorInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.componentDidCatch"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 575,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.componentDidCatch"
							}
						},
						{
							"id": 669,
							"name": "componentDidMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 670,
									"name": "componentDidMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.componentDidMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 554,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.componentDidMount"
							}
						},
						{
							"id": 686,
							"name": "componentDidUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 687,
									"name": "componentDidUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately after updating occurs. Not called for the initial render.",
										"text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n"
									},
									"parameters": [
										{
											"id": 688,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "IExpanderProps",
														"id": 638
													}
												]
											}
										},
										{
											"id": 689,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "__type"
													}
												]
											}
										},
										{
											"id": 690,
											"name": "snapshot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SS",
												"id": 668
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "NewLifecycle.componentDidUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 617,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "NewLifecycle.componentDidUpdate"
							}
						},
						{
							"id": 691,
							"name": "componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 692,
									"name": "componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 632,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.componentWillMount"
							}
						},
						{
							"id": 695,
							"name": "componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 696,
									"name": "componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 697,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "IExpanderProps",
														"id": 638
													}
												]
											}
										},
										{
											"id": 698,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 661,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.componentWillReceiveProps"
							}
						},
						{
							"id": 676,
							"name": "componentWillUnmount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 677,
									"name": "componentWillUnmount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.componentWillUnmount"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 570,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.componentWillUnmount"
							}
						},
						{
							"id": 703,
							"name": "componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 704,
									"name": "componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 705,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "IExpanderProps",
														"id": 638
													}
												]
											}
										},
										{
											"id": 706,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "__type"
													}
												]
											}
										},
										{
											"id": 707,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 691,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.componentWillUpdate"
							}
						},
						{
							"id": 728,
							"name": "forceUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 729,
									"name": "forceUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 730,
											"name": "callBack",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 731,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 732,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Component.forceUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 450,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.forceUpdate"
							}
						},
						{
							"id": 682,
							"name": "getSnapshotBeforeUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 683,
									"name": "getSnapshotBeforeUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
										"text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"
									},
									"parameters": [
										{
											"id": 684,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "IExpanderProps",
														"id": 638
													}
												]
											}
										},
										{
											"id": 685,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "__type"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "SS"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "NewLifecycle.getSnapshotBeforeUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 611,
									"character": 31
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "NewLifecycle.getSnapshotBeforeUpdate"
							}
						},
						{
							"id": 663,
							"name": "handleToggle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 664,
									"name": "handleToggle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 665,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "MouseEvent",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLElement"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
									"line": 68,
									"character": 13
								}
							]
						},
						{
							"id": 666,
							"name": "render",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 667,
									"name": "render",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element"
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.render"
									}
								}
							],
							"sources": [
								{
									"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
									"line": 75,
									"character": 7
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.render"
							}
						},
						{
							"id": 715,
							"name": "setState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 716,
									"name": "setState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 717,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "__type"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 718,
											"name": "state",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 719,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 720,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 721,
																			"name": "prevState",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "Readonly",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"name": "__type"
																					}
																				]
																			}
																		},
																		{
																			"id": 722,
																			"name": "props",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "Readonly",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"name": "IExpanderProps",
																						"id": 638
																					}
																				]
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "null"
																			},
																			{
																				"type": "unknown",
																				"name": "S"
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 723,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {}
																				}
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
																	"line": 446,
																	"character": 18
																}
															]
														}
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "null"
															},
															{
																"type": "unknown",
																"name": "S"
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 724,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {}
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 725,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 726,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 727,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Component.setState"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 445,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.setState"
							}
						},
						{
							"id": 671,
							"name": "shouldComponentUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 672,
									"name": "shouldComponentUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called to determine whether the change in props and state should trigger a re-render.",
										"text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"
									},
									"parameters": [
										{
											"id": 673,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "IExpanderProps",
														"id": 638
													}
												]
											}
										},
										{
											"id": 674,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "reference",
														"name": "__type"
													}
												]
											}
										},
										{
											"id": 675,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.shouldComponentUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 565,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.shouldComponentUpdate"
							}
						},
						{
							"id": 660,
							"name": "defaultProps",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"children": [
								{
									"id": 662,
									"name": "Label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
											"line": 65,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "Element"
									},
									"defaultValue": " <Label/>"
								},
								{
									"id": 661,
									"name": "onToggle",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
											"line": 64,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "noop"
									},
									"defaultValue": " _.noop"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										662,
										661
									]
								}
							],
							"sources": [
								{
									"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
									"line": 63,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								657
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								714,
								733,
								737,
								736,
								713,
								656
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								693,
								699,
								708,
								678,
								669,
								686,
								691,
								695,
								676,
								703,
								728,
								682,
								663,
								666,
								715,
								671
							]
						},
						{
							"title": "Object literals",
							"kind": 2097152,
							"children": [
								660
							]
						}
					],
					"sources": [
						{
							"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
							"line": 55,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Component",
							"typeArguments": [
								{
									"type": "reference",
									"name": "IExpanderProps",
									"id": 638
								},
								{
									"type": "reference",
									"name": "__type"
								}
							]
						}
					]
				},
				{
					"id": 635,
					"name": "IExpanderLabelProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 637,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
									"line": 10,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "React.ReactNode"
							}
						},
						{
							"id": 636,
							"name": "description",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
									"line": 9,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								637,
								636
							]
						}
					],
					"sources": [
						{
							"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
							"line": 8,
							"character": 29
						}
					]
				},
				{
					"id": 638,
					"name": "IExpanderProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"typeParameter": [
						{
							"id": 651,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 648,
							"name": "Label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Child element whose children represents content to be shown next to the\nexpander icon."
							},
							"sources": [
								{
									"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
									"line": 34,
									"character": 6
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "ReactNode"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 649,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 650,
													"name": "props",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
															"line": 34,
															"character": 28
														}
													],
													"type": {
														"type": "reference",
														"name": "IExpanderLabelProps",
														"id": 635
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														650
													]
												}
											],
											"sources": [
												{
													"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
													"line": 34,
													"character": 20
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 652,
							"name": "initialState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 39,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "S",
								"id": 651
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "IHybridCompatibleProps.initialState",
								"id": 100
							}
						},
						{
							"id": 639,
							"name": "isExpanded",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that the component is in the \"expanded\" state when true and in\nthe \"unexpanded\" state when false."
							},
							"sources": [
								{
									"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
									"line": 18,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 640,
							"name": "onToggle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Called when the user clicks on the component's header."
							},
							"sources": [
								{
									"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 641,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 642,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 643,
													"name": "isExpanded",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 644,
													"name": "__namedParameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"originalName": "__1",
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 645,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 646,
																	"name": "event",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
																			"line": 26,
																			"character": 8
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "MouseEvent",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"name": "HTMLElement"
																			},
																			{
																				"type": "reference",
																				"name": "MouseEvent"
																			}
																		]
																	}
																},
																{
																	"id": 647,
																	"name": "props",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
																			"line": 27,
																			"character": 8
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "IExpanderProps",
																		"id": 638
																	}
																}
															],
															"groups": [
																{
																	"title": "Variables",
																	"kind": 32,
																	"children": [
																		646,
																		647
																	]
																}
															],
															"sources": [
																{
																	"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
																	"line": 24,
																	"character": 22
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
											"line": 23,
											"character": 10
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								648,
								652,
								639,
								640
							]
						}
					],
					"sources": [
						{
							"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
							"line": 13,
							"character": 24
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "IHybridCompatibleProps",
							"id": 98
						}
					]
				},
				{
					"id": 653,
					"name": "IExpanderState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 654,
							"name": "isExpanded",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
									"line": 40,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								654
							]
						}
					],
					"sources": [
						{
							"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
							"line": 39,
							"character": 24
						}
					]
				},
				{
					"id": 752,
					"name": "ModernHybridDemoSmart",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
							"line": 87,
							"character": 34
						}
					],
					"type": {
						"type": "reference",
						"name": "WrappedHybridComponent"
					},
					"defaultValue": " buildModernHybridComponent<IExpanderProps, IExpanderState>(\n\tModernHybridDemoDumb,\n\t{ reducers }\n)"
				},
				{
					"id": 747,
					"name": "Label",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 748,
							"name": "Label",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 749,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "IExpanderLabelProps",
												"id": 635
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 750,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 751,
															"name": "children",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
																	"line": 758,
																	"character": 46
																}
															],
															"type": {
																"type": "reference",
																"name": "ReactNode"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																751
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					],
					"sources": [
						{
							"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
							"line": 49,
							"character": 11
						}
					]
				},
				{
					"id": 741,
					"name": "reducers",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 742,
							"name": "onToggle",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 743,
									"name": "onToggle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 744,
											"name": "state",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IExpanderState",
												"id": 653
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 745,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 746,
													"name": "isExpanded",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
															"line": 45,
															"character": 31
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"defaultValue": " state.isExpanded"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														746
													]
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
									"line": 44,
									"character": 9
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								742
							]
						}
					],
					"sources": [
						{
							"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
							"line": 43,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						655
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						635,
						638,
						653
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						752
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						747
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						741
					]
				}
			],
			"sources": [
				{
					"fileName": "components/ModernHybridDemo/ModernHybridDemo.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 753,
			"name": "\"constants/charts\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/constants/charts.ts",
			"children": [
				{
					"id": 754,
					"name": "COLOR_0",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 4,
							"character": 20
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-0\""
				},
				{
					"id": 757,
					"name": "COLOR_0_DARK",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 7,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-0-dark\""
				},
				{
					"id": 758,
					"name": "COLOR_0_DARKEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 8,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-0-darkest\""
				},
				{
					"id": 756,
					"name": "COLOR_0_LIGHT",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 6,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-0-light\""
				},
				{
					"id": 755,
					"name": "COLOR_0_LIGHTEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 5,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-0-lightest\""
				},
				{
					"id": 759,
					"name": "COLOR_1",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 9,
							"character": 20
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-1\""
				},
				{
					"id": 762,
					"name": "COLOR_1_DARK",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 12,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-1-dark\""
				},
				{
					"id": 763,
					"name": "COLOR_1_DARKEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 13,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-1-darkest\""
				},
				{
					"id": 761,
					"name": "COLOR_1_LIGHT",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 11,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-1-light\""
				},
				{
					"id": 760,
					"name": "COLOR_1_LIGHTEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 10,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-1-lightest\""
				},
				{
					"id": 764,
					"name": "COLOR_2",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 14,
							"character": 20
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-2\""
				},
				{
					"id": 767,
					"name": "COLOR_2_DARK",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 17,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-2-dark\""
				},
				{
					"id": 768,
					"name": "COLOR_2_DARKEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 18,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-2-darkest\""
				},
				{
					"id": 766,
					"name": "COLOR_2_LIGHT",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 16,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-2-light\""
				},
				{
					"id": 765,
					"name": "COLOR_2_LIGHTEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 15,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-2-lightest\""
				},
				{
					"id": 769,
					"name": "COLOR_3",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 19,
							"character": 20
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-3\""
				},
				{
					"id": 772,
					"name": "COLOR_3_DARK",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 22,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-3-dark\""
				},
				{
					"id": 773,
					"name": "COLOR_3_DARKEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 23,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-3-darkest\""
				},
				{
					"id": 771,
					"name": "COLOR_3_LIGHT",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 21,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-3-light\""
				},
				{
					"id": 770,
					"name": "COLOR_3_LIGHTEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 20,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-3-lightest\""
				},
				{
					"id": 774,
					"name": "COLOR_4",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 24,
							"character": 20
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-4\""
				},
				{
					"id": 777,
					"name": "COLOR_4_DARK",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 27,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-4-dark\""
				},
				{
					"id": 778,
					"name": "COLOR_4_DARKEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 28,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-4-darkest\""
				},
				{
					"id": 776,
					"name": "COLOR_4_LIGHT",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 26,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-4-light\""
				},
				{
					"id": 775,
					"name": "COLOR_4_LIGHTEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 25,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-4-lightest\""
				},
				{
					"id": 779,
					"name": "COLOR_5",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 29,
							"character": 20
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-5\""
				},
				{
					"id": 782,
					"name": "COLOR_5_DARK",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 32,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-5-dark\""
				},
				{
					"id": 783,
					"name": "COLOR_5_DARKEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 33,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-5-darkest\""
				},
				{
					"id": 781,
					"name": "COLOR_5_LIGHT",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 31,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-5-light\""
				},
				{
					"id": 780,
					"name": "COLOR_5_LIGHTEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 30,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-5-lightest\""
				},
				{
					"id": 789,
					"name": "COLOR_BAD",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 39,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-bad\""
				},
				{
					"id": 792,
					"name": "COLOR_BAD_DARK",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 42,
							"character": 27
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-bad-dark\""
				},
				{
					"id": 793,
					"name": "COLOR_BAD_DARKEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 43,
							"character": 30
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-bad-darkest\""
				},
				{
					"id": 791,
					"name": "COLOR_BAD_LIGHT",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 41,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-bad-light\""
				},
				{
					"id": 790,
					"name": "COLOR_BAD_LIGHTEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 40,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-bad-lightest\""
				},
				{
					"id": 784,
					"name": "COLOR_GOOD",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 34,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-good\""
				},
				{
					"id": 787,
					"name": "COLOR_GOOD_DARK",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 37,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-good-dark\""
				},
				{
					"id": 788,
					"name": "COLOR_GOOD_DARKEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 38,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-good-darkest\""
				},
				{
					"id": 786,
					"name": "COLOR_GOOD_LIGHT",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 36,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-good-light\""
				},
				{
					"id": 785,
					"name": "COLOR_GOOD_LIGHTEST",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 35,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-good-lightest\""
				},
				{
					"id": 794,
					"name": "COLOR_NEUTRAL",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 44,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"color-chart-neutral\""
				},
				{
					"id": 796,
					"name": "PALETTE_30",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 48,
							"character": 23
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " [\n\tCOLOR_0_LIGHTEST,\n\tCOLOR_0_LIGHT,\n\tCOLOR_0,\n\tCOLOR_0_DARK,\n\tCOLOR_0_DARKEST,\n\n\tCOLOR_1_LIGHTEST,\n\tCOLOR_1_LIGHT,\n\tCOLOR_1,\n\tCOLOR_1_DARK,\n\tCOLOR_1_DARKEST,\n\n\tCOLOR_2_LIGHTEST,\n\tCOLOR_2_LIGHT,\n\tCOLOR_2,\n\tCOLOR_2_DARK,\n\tCOLOR_2_DARKEST,\n\n\tCOLOR_3_LIGHTEST,\n\tCOLOR_3_LIGHT,\n\tCOLOR_3,\n\tCOLOR_3_DARK,\n\tCOLOR_3_DARKEST,\n\n\tCOLOR_4_LIGHTEST,\n\tCOLOR_4_LIGHT,\n\tCOLOR_4,\n\tCOLOR_4_DARK,\n\tCOLOR_4_DARKEST,\n\n\tCOLOR_5_LIGHTEST,\n\tCOLOR_5_LIGHT,\n\tCOLOR_5,\n\tCOLOR_5_DARK,\n\tCOLOR_5_DARKEST,\n]"
				},
				{
					"id": 795,
					"name": "PALETTE_6",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 46,
							"character": 22
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " [COLOR_0, COLOR_1, COLOR_2, COLOR_3, COLOR_4, COLOR_5]"
				},
				{
					"id": 801,
					"name": "PALETTE_MONOCHROME_0_5",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 114,
							"character": 35
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " [\n\tCOLOR_0_LIGHTEST,\n\tCOLOR_0_LIGHT,\n\tCOLOR_0,\n\tCOLOR_0_DARK,\n\tCOLOR_0_DARKEST,\n]"
				},
				{
					"id": 802,
					"name": "PALETTE_MONOCHROME_1_5",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 122,
							"character": 35
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " [\n\tCOLOR_1_LIGHTEST,\n\tCOLOR_1_LIGHT,\n\tCOLOR_1,\n\tCOLOR_1_DARK,\n\tCOLOR_1_DARKEST,\n]"
				},
				{
					"id": 803,
					"name": "PALETTE_MONOCHROME_2_5",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 130,
							"character": 35
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " [\n\tCOLOR_2_LIGHTEST,\n\tCOLOR_2_LIGHT,\n\tCOLOR_2,\n\tCOLOR_2_DARK,\n\tCOLOR_2_DARKEST,\n]"
				},
				{
					"id": 804,
					"name": "PALETTE_MONOCHROME_3_5",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 138,
							"character": 35
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " [\n\tCOLOR_3_LIGHTEST,\n\tCOLOR_3_LIGHT,\n\tCOLOR_3,\n\tCOLOR_3_DARK,\n\tCOLOR_3_DARKEST,\n]"
				},
				{
					"id": 805,
					"name": "PALETTE_MONOCHROME_4_5",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 146,
							"character": 35
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " [\n\tCOLOR_4_LIGHTEST,\n\tCOLOR_4_LIGHT,\n\tCOLOR_4,\n\tCOLOR_4_DARK,\n\tCOLOR_4_DARKEST,\n]"
				},
				{
					"id": 806,
					"name": "PALETTE_MONOCHROME_5_5",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 154,
							"character": 35
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " [\n\tCOLOR_5_LIGHTEST,\n\tCOLOR_5_LIGHT,\n\tCOLOR_5,\n\tCOLOR_5_DARK,\n\tCOLOR_5_DARKEST,\n]"
				},
				{
					"id": 799,
					"name": "PALETTE_MONOCHROME_BAD_3",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 100,
							"character": 37
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " [\n\tCOLOR_BAD_LIGHT,\n\tCOLOR_BAD,\n\tCOLOR_BAD_DARK,\n]"
				},
				{
					"id": 800,
					"name": "PALETTE_MONOCHROME_BAD_5",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 106,
							"character": 37
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " [\n\tCOLOR_BAD_LIGHTEST,\n\tCOLOR_BAD_LIGHT,\n\tCOLOR_BAD,\n\tCOLOR_BAD_DARK,\n\tCOLOR_BAD_DARKEST,\n]"
				},
				{
					"id": 797,
					"name": "PALETTE_MONOCHROME_GOOD_3",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 86,
							"character": 38
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " [\n\tCOLOR_GOOD_LIGHT,\n\tCOLOR_GOOD,\n\tCOLOR_GOOD_DARK,\n]"
				},
				{
					"id": 798,
					"name": "PALETTE_MONOCHROME_GOOD_5",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/charts.ts",
							"line": 92,
							"character": 38
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " [\n\tCOLOR_GOOD_LIGHTEST,\n\tCOLOR_GOOD_LIGHT,\n\tCOLOR_GOOD,\n\tCOLOR_GOOD_DARK,\n\tCOLOR_GOOD_DARKEST,\n]"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						754,
						757,
						758,
						756,
						755,
						759,
						762,
						763,
						761,
						760,
						764,
						767,
						768,
						766,
						765,
						769,
						772,
						773,
						771,
						770,
						774,
						777,
						778,
						776,
						775,
						779,
						782,
						783,
						781,
						780,
						789,
						792,
						793,
						791,
						790,
						784,
						787,
						788,
						786,
						785,
						794,
						796,
						795,
						801,
						802,
						803,
						804,
						805,
						806,
						799,
						800,
						797,
						798
					]
				}
			],
			"sources": [
				{
					"fileName": "constants/charts.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 807,
			"name": "\"constants/key-code\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/constants/key-code.ts",
			"children": [
				{
					"id": 815,
					"name": "ArrowDown",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/key-code.ts",
							"line": 13,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "40"
				},
				{
					"id": 812,
					"name": "ArrowLeft",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/key-code.ts",
							"line": 10,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "37"
				},
				{
					"id": 814,
					"name": "ArrowRight",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/key-code.ts",
							"line": 12,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "39"
				},
				{
					"id": 813,
					"name": "ArrowUp",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/key-code.ts",
							"line": 11,
							"character": 20
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "38"
				},
				{
					"id": 809,
					"name": "Enter",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/key-code.ts",
							"line": 7,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "13"
				},
				{
					"id": 810,
					"name": "Escape",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/key-code.ts",
							"line": 8,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "27"
				},
				{
					"id": 811,
					"name": "Space",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/key-code.ts",
							"line": 9,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "32"
				},
				{
					"id": 808,
					"name": "Tab",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "constants/key-code.ts",
							"line": 6,
							"character": 16
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "9"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						815,
						812,
						814,
						813,
						809,
						810,
						811,
						808
					]
				}
			],
			"sources": [
				{
					"fileName": "constants/key-code.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 485,
			"name": "\"constants/motion-spring\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/constants/motion-spring.ts",
			"children": [
				{
					"id": 486,
					"name": "QUICK_SLIDE_MOTION",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 488,
							"name": "damping",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "constants/motion-spring.ts",
									"line": 7,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "37"
						},
						{
							"id": 489,
							"name": "precision",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "constants/motion-spring.ts",
									"line": 8,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "1"
						},
						{
							"id": 487,
							"name": "stiffness",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "constants/motion-spring.ts",
									"line": 6,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "640"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								488,
								489,
								487
							]
						}
					],
					"sources": [
						{
							"fileName": "constants/motion-spring.ts",
							"line": 1,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						486
					]
				}
			],
			"sources": [
				{
					"fileName": "constants/motion-spring.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 816,
			"name": "\"util/chart-helpers\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/util/chart-helpers.ts",
			"children": [
				{
					"id": 817,
					"name": "Collection",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 5,
							"character": 15
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "object"
						}
					}
				},
				{
					"id": 818,
					"name": "Fields",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 6,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 879,
					"name": "FORMAT_DAY",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 236,
							"character": 16
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 880,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 881,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 882,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					},
					"defaultValue": " d3TimeFormat.timeFormat('%a %d')"
				},
				{
					"id": 875,
					"name": "FORMAT_HOUR",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 235,
							"character": 17
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 876,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 877,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 878,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					},
					"defaultValue": " d3TimeFormat.timeFormat('%I %p')"
				},
				{
					"id": 863,
					"name": "FORMAT_MILLISECOND",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 232,
							"character": 24
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 864,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 865,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 866,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					},
					"defaultValue": " d3TimeFormat.timeFormat('.%L')"
				},
				{
					"id": 871,
					"name": "FORMAT_MINUTE",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 234,
							"character": 19
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 872,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 873,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 874,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					},
					"defaultValue": " d3TimeFormat.timeFormat('%I:%M')"
				},
				{
					"id": 887,
					"name": "FORMAT_MONTH",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 238,
							"character": 18
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 888,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 889,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 890,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					},
					"defaultValue": " d3TimeFormat.timeFormat('%b')"
				},
				{
					"id": 867,
					"name": "FORMAT_SECOND",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 233,
							"character": 19
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 868,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 869,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 870,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					},
					"defaultValue": " d3TimeFormat.timeFormat(':%S')"
				},
				{
					"id": 883,
					"name": "FORMAT_WEEK",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 237,
							"character": 17
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 884,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 885,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 886,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					},
					"defaultValue": " d3TimeFormat.timeFormat('%b %d')"
				},
				{
					"id": 891,
					"name": "FORMAT_YEAR",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 239,
							"character": 17
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 892,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 893,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 894,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					},
					"defaultValue": " d3TimeFormat.timeFormat('%Y')"
				},
				{
					"id": 831,
					"name": "byFields",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 832,
							"name": "byFields",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "byFields",
								"text": "Takes a collection of data and returns an array of all the fields off that\ncollection.\n",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 833,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 817
									}
								},
								{
									"id": 834,
									"name": "fields",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Fields",
										"id": 818
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "object"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 94,
							"character": 24
						}
					]
				},
				{
					"id": 851,
					"name": "discreteTicks",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 852,
							"name": "discreteTicks",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "discreteTicks",
								"text": "Returns `count` evenly spaced, representative values from the `array`.\n",
								"returns": "\n"
							},
							"typeParameter": [
								{
									"id": 853,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 854,
									"name": "array",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								},
								{
									"id": 855,
									"name": "count",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "unknown",
									"name": "T"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 190,
							"character": 29
						}
					]
				},
				{
					"id": 823,
					"name": "extractFields",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 824,
							"name": "extractFields",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "extractFields",
								"text": "This will return the data in a similar format to stackByFields but without\nthe stacking.\n",
								"returns": "- array of arrays, one for each field\n"
							},
							"parameters": [
								{
									"id": 825,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "normalized data you want to operate on"
									},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 817
									}
								},
								{
									"id": 826,
									"name": "fields",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "fields to pluck off for the y data"
									},
									"type": {
										"type": "reference",
										"name": "Fields",
										"id": 818
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 55,
							"character": 29
						}
					]
				},
				{
					"id": 895,
					"name": "formatDate",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 896,
							"name": "formatDate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "formatDate",
								"text": "This function was written to be used for tick formatting with d3 time\nscales.\n",
								"returns": "- formatted date\n"
							},
							"parameters": [
								{
									"id": 897,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input date"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 250,
							"character": 26
						}
					]
				},
				{
					"id": 827,
					"name": "groupByFields",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 828,
							"name": "groupByFields",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "groupByFields",
								"text": "This will return the data in a similar format to d3Shape.stack\nbut without the stacking of the data.\n",
								"returns": "- array of arrays, one for each field\n"
							},
							"parameters": [
								{
									"id": 829,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "normalized data you want to operate on"
									},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 817
									}
								},
								{
									"id": 830,
									"name": "fields",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "fields to pluck off for the y data"
									},
									"type": {
										"type": "reference",
										"name": "Fields",
										"id": 818
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 76,
							"character": 29
						}
					]
				},
				{
					"id": 843,
					"name": "maxByFields",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 844,
							"name": "maxByFields",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "maxByFields",
								"text": "Returns the maximum element from a collection by a set of fields.\n",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 845,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 817
									}
								},
								{
									"id": 846,
									"name": "fields",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Fields",
										"id": 818
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 154,
							"character": 27
						}
					]
				},
				{
					"id": 847,
					"name": "maxByFieldsStacked",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 848,
							"name": "maxByFieldsStacked",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "maxByFieldsStacked",
								"text": "Returns the max sum of a set of fields from a collection\n",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 849,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 817
									}
								},
								{
									"id": 850,
									"name": "fields",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Fields",
										"id": 818
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 167,
							"character": 34
						}
					]
				},
				{
					"id": 839,
					"name": "minByFields",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 840,
							"name": "minByFields",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "minByFields",
								"text": "Returns the minimum element from a collection by a set of fields.\n",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 841,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 817
									}
								},
								{
									"id": 842,
									"name": "fields",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Fields",
										"id": 818
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 141,
							"character": 27
						}
					]
				},
				{
					"id": 835,
					"name": "nearest",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 836,
							"name": "nearest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "nearest",
								"text": "Divide and conquer algorithm that helps find the nearest element to `value`\nin `nums`\n",
								"returns": "- the nearest array element to the value\n"
							},
							"parameters": [
								{
									"id": 837,
									"name": "nums",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "sorted array of numbers to search through"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 838,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "value you're trying to locate the nearest array element for"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 116,
							"character": 23
						}
					]
				},
				{
					"id": 819,
					"name": "stackByFields",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 820,
							"name": "stackByFields",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "stackByFields",
								"text": "D3's `stack` groups each series' data together but we sometimes we want the\nstacked groups to remain grouped as in the original normalized data. This\nfunction helps achieve that.\n",
								"returns": "- array of arrays, one for row in the original `collection`\n"
							},
							"parameters": [
								{
									"id": 821,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "normalized data you want to operate on"
									},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 817
									}
								},
								{
									"id": 822,
									"name": "fields",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "fields to pluck off for the y data"
									},
									"type": {
										"type": "reference",
										"name": "Fields",
										"id": 818
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 19,
							"character": 29
						}
					]
				},
				{
					"id": 856,
					"name": "transformFromCenter",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 857,
							"name": "transformFromCenter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "transformFromCenter",
								"text": "Scaling paths from their center is tricky. This function\nhelps do that be generating a translate/scale transform\nstring with the correct numbers.\n",
								"returns": "- transform string\n"
							},
							"parameters": [
								{
									"id": 858,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the x data point where you want the path to be centered at"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 859,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the y data point where you want the path to be centered at"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 860,
									"name": "xCenter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the x coordinate of the center of the path you're trying to transform"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 861,
									"name": "yCenter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the x coordinate of the center of the path you're trying to transform"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 862,
									"name": "scale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "number to scale to, 2 would be 2x bigger"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/chart-helpers.ts",
							"line": 220,
							"character": 35
						}
					]
				}
			],
			"groups": [
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						817,
						818
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						879,
						875,
						863,
						871,
						887,
						867,
						883,
						891
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						831,
						851,
						823,
						895,
						827,
						843,
						847,
						839,
						835,
						819,
						856
					]
				}
			],
			"sources": [
				{
					"fileName": "util/chart-helpers.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 301,
			"name": "\"util/component-types\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/util/component-types.ts",
			"children": [
				{
					"id": 382,
					"name": "ICreateClassComponentClass",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 383,
							"name": "P",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 393,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"indexSignature": [
						{
							"id": 385,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 386,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 387,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 388,
									"name": "new ICreateClassComponentClass",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 389,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "P"
											}
										},
										{
											"id": 390,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ClassicComponent",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "reference",
												"name": "ComponentState"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "ComponentClass.__new"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ClassicComponentClass.__new"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 529,
									"character": 71
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "ComponentClass.__new"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ClassicComponentClass.__new"
							}
						},
						{
							"id": 397,
							"name": "childContextTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 524,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"name": "ValidationMap",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentClass.childContextTypes"
							}
						},
						{
							"id": 395,
							"name": "contextType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 522,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Context",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentClass.contextType"
							}
						},
						{
							"id": 396,
							"name": "contextTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 523,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"name": "ValidationMap",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentClass.contextTypes"
							}
						},
						{
							"id": 398,
							"name": "defaultProps",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 525,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"name": "Partial",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "P"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentClass.defaultProps"
							}
						},
						{
							"id": 399,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 526,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentClass.displayName"
							}
						},
						{
							"id": 401,
							"name": "getDerivedStateFromError",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 581,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"name": "GetDerivedStateFromError",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "P"
									},
									{
										"type": "typeParameter",
										"name": "S"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "StaticLifecycle.getDerivedStateFromError"
							}
						},
						{
							"id": 400,
							"name": "getDerivedStateFromProps",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 580,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"name": "GetDerivedStateFromProps",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "P"
									},
									{
										"type": "typeParameter",
										"name": "S"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "StaticLifecycle.getDerivedStateFromProps"
							}
						},
						{
							"id": 384,
							"name": "propName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "util/component-types.ts",
									"line": 35,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 394,
							"name": "propTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 521,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "WeakValidationMap",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "P"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentClass.propTypes"
							}
						},
						{
							"id": 391,
							"name": "getDefaultProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 392,
									"name": "getDefaultProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "P"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ClassicComponentClass.getDefaultProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 531,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ClassicComponentClass.getDefaultProps"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								387
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								397,
								395,
								396,
								398,
								399,
								401,
								400,
								384,
								394
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								391
							]
						}
					],
					"sources": [
						{
							"fileName": "util/component-types.ts",
							"line": 33,
							"character": 43
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ClassicComponentClass",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "P"
								}
							]
						}
					]
				},
				{
					"id": 302,
					"name": "ICreateClassComponentSpec",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"typeParameter": [
						{
							"id": 306,
							"name": "P",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 303,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 304,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 305,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "util/component-types.ts",
											"line": 10,
											"character": 45
										}
									]
								}
							}
						},
						{
							"id": 307,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 337,
							"name": "SS",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"indexSignature": [
						{
							"id": 326,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 327,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 308,
							"name": "_isPrivate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "util/component-types.ts",
									"line": 12,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 332,
							"name": "childContextTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 718,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"name": "ValidationMap",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Mixin.childContextTypes"
							}
						},
						{
							"id": 311,
							"name": "components",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "util/component-types.ts",
									"line": 15,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 312,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 313,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 314,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "ICreateClassComponentClass",
														"id": 382,
														"typeArguments": [
															{
																"type": "reference",
																"name": "__type"
															}
														]
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 331,
							"name": "contextTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 717,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"name": "ValidationMap",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Mixin.contextTypes"
							}
						},
						{
							"id": 329,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 715,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Mixin.displayName"
							}
						},
						{
							"id": 309,
							"name": "initialState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "util/component-types.ts",
									"line": 13,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "S",
								"id": 307
							}
						},
						{
							"id": 328,
							"name": "mixins",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 710,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Mixin",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "P",
												"constraint": {
													"type": "reflection",
													"declaration": {
														"id": 303,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {},
														"indexSignature": [
															{
																"id": 304,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 305,
																		"name": "key",
																		"kind": 32768,
																		"kindString": "Parameter",
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														],
														"sources": [
															{
																"fileName": "util/component-types.ts",
																"line": 10,
																"character": 45
															}
														]
													}
												}
											},
											{
												"type": "typeParameter",
												"name": "S"
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Mixin.mixins"
							}
						},
						{
							"id": 310,
							"name": "propName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "util/component-types.ts",
									"line": 14,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 330,
							"name": "propTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 716,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ValidationMap",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Mixin.propTypes"
							}
						},
						{
							"id": 320,
							"name": "reducers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "util/component-types.ts",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 321,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									}
								]
							}
						},
						{
							"id": 322,
							"name": "selectors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "util/component-types.ts",
									"line": 24,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 323,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									}
								]
							}
						},
						{
							"id": 315,
							"name": "statics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "util/component-types.ts",
									"line": 18,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 316,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 318,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 319,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"children": [
												{
													"id": 317,
													"name": "definition",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "util/component-types.ts",
															"line": 19,
															"character": 12
														}
													],
													"type": {
														"type": "reference",
														"name": "ICreateClassComponentSpec",
														"id": 302,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "P",
																"constraint": {
																	"type": "reflection",
																	"declaration": {
																		"id": 303,
																		"name": "__type",
																		"kind": 65536,
																		"kindString": "Type literal",
																		"flags": {},
																		"indexSignature": [
																			{
																				"id": 304,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 305,
																						"name": "key",
																						"kind": 32768,
																						"kindString": "Parameter",
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		],
																		"sources": [
																			{
																				"fileName": "util/component-types.ts",
																				"line": 10,
																				"character": 45
																			}
																		]
																	}
																}
															},
															{
																"type": "typeParameter",
																"name": "S"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														317
													]
												}
											]
										}
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "Mixin.statics"
							}
						},
						{
							"id": 362,
							"name": "UNSAFE_componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 363,
									"name": "UNSAFE_componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 646,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
							}
						},
						{
							"id": 368,
							"name": "UNSAFE_componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 369,
									"name": "UNSAFE_componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 370,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P",
														"constraint": {
															"type": "reflection",
															"declaration": {
																"id": 303,
																"name": "__type",
																"kind": 65536,
																"kindString": "Type literal",
																"flags": {},
																"indexSignature": [
																	{
																		"id": 304,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 305,
																				"name": "key",
																				"kind": 32768,
																				"kindString": "Parameter",
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																],
																"sources": [
																	{
																		"fileName": "util/component-types.ts",
																		"line": 10,
																		"character": 45
																	}
																]
															}
														}
													}
												]
											}
										},
										{
											"id": 371,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 678,
									"character": 40
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
							}
						},
						{
							"id": 377,
							"name": "UNSAFE_componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 378,
									"name": "UNSAFE_componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 379,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P",
														"constraint": {
															"type": "reflection",
															"declaration": {
																"id": 303,
																"name": "__type",
																"kind": 65536,
																"kindString": "Type literal",
																"flags": {},
																"indexSignature": [
																	{
																		"id": 304,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 305,
																				"name": "key",
																				"kind": 32768,
																				"kindString": "Parameter",
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																],
																"sources": [
																	{
																		"fileName": "util/component-types.ts",
																		"line": 10,
																		"character": 45
																	}
																]
															}
														}
													}
												]
											}
										},
										{
											"id": 380,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S"
													}
												]
											}
										},
										{
											"id": 381,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 706,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
							}
						},
						{
							"id": 347,
							"name": "componentDidCatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 348,
									"name": "componentDidCatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."
									},
									"parameters": [
										{
											"id": 349,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 350,
											"name": "errorInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ErrorInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.componentDidCatch"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 575,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.componentDidCatch"
							}
						},
						{
							"id": 338,
							"name": "componentDidMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 339,
									"name": "componentDidMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.componentDidMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 554,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.componentDidMount"
							}
						},
						{
							"id": 355,
							"name": "componentDidUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 356,
									"name": "componentDidUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately after updating occurs. Not called for the initial render.",
										"text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n"
									},
									"parameters": [
										{
											"id": 357,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P",
														"constraint": {
															"type": "reflection",
															"declaration": {
																"id": 303,
																"name": "__type",
																"kind": 65536,
																"kindString": "Type literal",
																"flags": {},
																"indexSignature": [
																	{
																		"id": 304,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 305,
																				"name": "key",
																				"kind": 32768,
																				"kindString": "Parameter",
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																],
																"sources": [
																	{
																		"fileName": "util/component-types.ts",
																		"line": 10,
																		"character": 45
																	}
																]
															}
														}
													}
												]
											}
										},
										{
											"id": 358,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S"
													}
												]
											}
										},
										{
											"id": 359,
											"name": "snapshot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SS",
												"id": 337
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "NewLifecycle.componentDidUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 617,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "NewLifecycle.componentDidUpdate"
							}
						},
						{
							"id": 360,
							"name": "componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 361,
									"name": "componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 632,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.componentWillMount"
							}
						},
						{
							"id": 364,
							"name": "componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 365,
									"name": "componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 366,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P",
														"constraint": {
															"type": "reflection",
															"declaration": {
																"id": 303,
																"name": "__type",
																"kind": 65536,
																"kindString": "Type literal",
																"flags": {},
																"indexSignature": [
																	{
																		"id": 304,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 305,
																				"name": "key",
																				"kind": 32768,
																				"kindString": "Parameter",
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																],
																"sources": [
																	{
																		"fileName": "util/component-types.ts",
																		"line": 10,
																		"character": 45
																	}
																]
															}
														}
													}
												]
											}
										},
										{
											"id": 367,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 661,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.componentWillReceiveProps"
							}
						},
						{
							"id": 345,
							"name": "componentWillUnmount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 346,
									"name": "componentWillUnmount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.componentWillUnmount"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 570,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.componentWillUnmount"
							}
						},
						{
							"id": 372,
							"name": "componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 373,
									"name": "componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 374,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P",
														"constraint": {
															"type": "reflection",
															"declaration": {
																"id": 303,
																"name": "__type",
																"kind": 65536,
																"kindString": "Type literal",
																"flags": {},
																"indexSignature": [
																	{
																		"id": 304,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 305,
																				"name": "key",
																				"kind": 32768,
																				"kindString": "Parameter",
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																],
																"sources": [
																	{
																		"fileName": "util/component-types.ts",
																		"line": 10,
																		"character": 45
																	}
																]
															}
														}
													}
												]
											}
										},
										{
											"id": 375,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S"
													}
												]
											}
										},
										{
											"id": 376,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 691,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.componentWillUpdate"
							}
						},
						{
							"id": 333,
							"name": "getDefaultProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 334,
									"name": "getDefaultProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "P",
										"constraint": {
											"type": "reflection",
											"declaration": {
												"id": 303,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"indexSignature": [
													{
														"id": 304,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 305,
																"name": "key",
																"kind": 32768,
																"kindString": "Parameter",
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												],
												"sources": [
													{
														"fileName": "util/component-types.ts",
														"line": 10,
														"character": 45
													}
												]
											}
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Mixin.getDefaultProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 720,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Mixin.getDefaultProps"
							}
						},
						{
							"id": 335,
							"name": "getInitialState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 336,
									"name": "getInitialState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "S"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Mixin.getInitialState"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 721,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Mixin.getInitialState"
							}
						},
						{
							"id": 351,
							"name": "getSnapshotBeforeUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 352,
									"name": "getSnapshotBeforeUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
										"text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"
									},
									"parameters": [
										{
											"id": 353,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P",
														"constraint": {
															"type": "reflection",
															"declaration": {
																"id": 303,
																"name": "__type",
																"kind": 65536,
																"kindString": "Type literal",
																"flags": {},
																"indexSignature": [
																	{
																		"id": 304,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 305,
																				"name": "key",
																				"kind": 32768,
																				"kindString": "Parameter",
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																],
																"sources": [
																	{
																		"fileName": "util/component-types.ts",
																		"line": 10,
																		"character": 45
																	}
																]
															}
														}
													}
												]
											}
										},
										{
											"id": 354,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "SS"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "NewLifecycle.getSnapshotBeforeUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 611,
									"character": 31
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "NewLifecycle.getSnapshotBeforeUpdate"
							}
						},
						{
							"id": 324,
							"name": "render",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 325,
									"name": "render",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "React.ReactNode"
									}
								}
							],
							"sources": [
								{
									"fileName": "util/component-types.ts",
									"line": 25,
									"character": 7
								}
							]
						},
						{
							"id": 340,
							"name": "shouldComponentUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 341,
									"name": "shouldComponentUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called to determine whether the change in props and state should trigger a re-render.",
										"text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"
									},
									"parameters": [
										{
											"id": 342,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P",
														"constraint": {
															"type": "reflection",
															"declaration": {
																"id": 303,
																"name": "__type",
																"kind": 65536,
																"kindString": "Type literal",
																"flags": {},
																"indexSignature": [
																	{
																		"id": 304,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 305,
																				"name": "key",
																				"kind": 32768,
																				"kindString": "Parameter",
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																],
																"sources": [
																	{
																		"fileName": "util/component-types.ts",
																		"line": 10,
																		"character": 45
																	}
																]
															}
														}
													}
												]
											}
										},
										{
											"id": 343,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S"
													}
												]
											}
										},
										{
											"id": 344,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.shouldComponentUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 565,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.shouldComponentUpdate"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								308,
								332,
								311,
								331,
								329,
								309,
								328,
								310,
								330,
								320,
								322,
								315
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								362,
								368,
								377,
								347,
								338,
								355,
								360,
								364,
								345,
								372,
								333,
								335,
								351,
								324,
								340
							]
						}
					],
					"sources": [
						{
							"fileName": "util/component-types.ts",
							"line": 10,
							"character": 35
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Mixin",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "P",
									"constraint": {
										"type": "reflection",
										"declaration": {
											"id": 303,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 304,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 305,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "util/component-types.ts",
													"line": 10,
													"character": 45
												}
											]
										}
									}
								},
								{
									"type": "typeParameter",
									"name": "S"
								}
							]
						}
					]
				},
				{
					"id": 402,
					"name": "createClass",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 403,
							"name": "createClass",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 404,
									"name": "P",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 405,
									"name": "S",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 406,
									"name": "spec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ICreateClassComponentSpec",
										"id": 302,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "S"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICreateClassComponentClass",
								"id": 382,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "P"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "util/component-types.ts",
							"line": 42,
							"character": 27
						}
					]
				},
				{
					"id": 420,
					"name": "createElements",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 421,
							"name": "createElements",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 422,
									"name": "P",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 423,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ICreateClassComponentClass",
										"id": 382,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "P"
											}
										]
									}
								},
								{
									"id": 424,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ReactElement",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "P"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "P"
													}
												]
											}
										]
									},
									"defaultValue": " []"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ReactElement",
									"typeArguments": [
										{
											"type": "unknown",
											"name": "P"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reflection",
													"declaration": {
														"id": 425,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {},
														"signatures": [
															{
																"id": 426,
																"name": "__call",
																"kind": 4096,
																"kindString": "Call signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 427,
																		"name": "props",
																		"kind": 32768,
																		"kindString": "Parameter",
																		"flags": {},
																		"type": {
																			"type": "typeParameter",
																			"name": "P"
																		}
																	}
																],
																"type": {
																	"type": "union",
																	"types": [
																		{
																			"type": "reference",
																			"name": "ReactElement"
																		},
																		{
																			"type": "intrinsic",
																			"name": "null"
																		}
																	]
																}
															}
														]
													}
												},
												{
													"type": "reflection",
													"declaration": {
														"id": 428,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {}
													}
												}
											]
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/component-types.ts",
							"line": 121,
							"character": 30
						}
					]
				},
				{
					"id": 407,
					"name": "filterTypes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 408,
							"name": "filterTypes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 409,
									"name": "P",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 410,
									"name": "children",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "React.ReactNode"
									}
								},
								{
									"id": 411,
									"name": "types",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ICreateClassComponentClass",
												"id": 382,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P"
													}
												]
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ICreateClassComponentClass",
													"id": 382,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "P"
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "undefined"
										},
										{
											"type": "intrinsic",
											"name": "null"
										},
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "number"
										},
										{
											"type": "intrinsic",
											"name": "false"
										},
										{
											"type": "intrinsic",
											"name": "true"
										},
										{
											"type": "reference",
											"name": "__type"
										},
										{
											"type": "reference",
											"name": "ReactElement",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "any"
												},
												{
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "reflection",
															"declaration": {
																"id": 412,
																"name": "__type",
																"kind": 65536,
																"kindString": "Type literal",
																"flags": {},
																"signatures": [
																	{
																		"id": 413,
																		"name": "__call",
																		"kind": 4096,
																		"kindString": "Call signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 414,
																				"name": "props",
																				"kind": 32768,
																				"kindString": "Parameter",
																				"flags": {},
																				"type": {
																					"type": "typeParameter",
																					"name": "P"
																				}
																			}
																		],
																		"type": {
																			"type": "union",
																			"types": [
																				{
																					"type": "reference",
																					"name": "ReactElement"
																				},
																				{
																					"type": "intrinsic",
																					"name": "null"
																				}
																			]
																		}
																	}
																]
															}
														},
														{
															"type": "reflection",
															"declaration": {
																"id": 415,
																"name": "__type",
																"kind": 65536,
																"kindString": "Type literal",
																"flags": {}
															}
														}
													]
												}
											]
										},
										{
											"type": "reference",
											"name": "ReactNodeArray"
										},
										{
											"type": "reference",
											"name": "ReactPortal"
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/component-types.ts",
							"line": 94,
							"character": 27
						}
					]
				},
				{
					"id": 429,
					"name": "findTypes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 430,
							"name": "findTypes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 431,
									"name": "P",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 432,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 433,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 434,
													"name": "children",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/component-types.ts",
															"line": 147,
															"character": 18
														}
													],
													"type": {
														"type": "reference",
														"name": "React.ReactNode"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														434
													]
												}
											],
											"sources": [
												{
													"fileName": "util/component-types.ts",
													"line": 147,
													"character": 7
												}
											]
										}
									}
								},
								{
									"id": 435,
									"name": "types",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ICreateClassComponentClass",
												"id": 382,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P"
													}
												]
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ICreateClassComponentClass",
													"id": 382,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "P"
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "React.ReactNode"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/component-types.ts",
							"line": 146,
							"character": 25
						}
					]
				},
				{
					"id": 436,
					"name": "getFirst",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 437,
							"name": "getFirst",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 440,
									"name": "P",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 438,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 439,
													"name": "children",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/component-types.ts",
															"line": 173,
															"character": 45
														}
													],
													"type": {
														"type": "reference",
														"name": "React.ReactNode"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														439
													]
												}
											],
											"sources": [
												{
													"fileName": "util/component-types.ts",
													"line": 173,
													"character": 34
												}
											]
										}
									}
								}
							],
							"parameters": [
								{
									"id": 441,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "P",
										"constraint": {
											"type": "reflection",
											"declaration": {
												"id": 438,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"children": [
													{
														"id": 439,
														"name": "children",
														"kind": 32,
														"kindString": "Variable",
														"flags": {},
														"sources": [
															{
																"fileName": "util/component-types.ts",
																"line": 173,
																"character": 45
															}
														],
														"type": {
															"type": "reference",
															"name": "React.ReactNode"
														}
													}
												],
												"groups": [
													{
														"title": "Variables",
														"kind": 32,
														"children": [
															439
														]
													}
												],
												"sources": [
													{
														"fileName": "util/component-types.ts",
														"line": 173,
														"character": 34
													}
												]
											}
										}
									}
								},
								{
									"id": 442,
									"name": "types",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ICreateClassComponentClass",
												"id": 382,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P",
														"constraint": {
															"type": "reflection",
															"declaration": {
																"id": 438,
																"name": "__type",
																"kind": 65536,
																"kindString": "Type literal",
																"flags": {},
																"children": [
																	{
																		"id": 439,
																		"name": "children",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "util/component-types.ts",
																				"line": 173,
																				"character": 45
																			}
																		],
																		"type": {
																			"type": "reference",
																			"name": "React.ReactNode"
																		}
																	}
																],
																"groups": [
																	{
																		"title": "Variables",
																		"kind": 32,
																		"children": [
																			439
																		]
																	}
																],
																"sources": [
																	{
																		"fileName": "util/component-types.ts",
																		"line": 173,
																		"character": 34
																	}
																]
															}
														}
													}
												]
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ICreateClassComponentClass",
													"id": 382,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "P",
															"constraint": {
																"type": "reflection",
																"declaration": {
																	"id": 438,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 439,
																			"name": "children",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "util/component-types.ts",
																					"line": 173,
																					"character": 45
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "React.ReactNode"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Variables",
																			"kind": 32,
																			"children": [
																				439
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "util/component-types.ts",
																			"line": 173,
																			"character": 34
																		}
																	]
																}
															}
														}
													]
												}
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								},
								{
									"id": 443,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "React.ReactNode"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "null"
									},
									{
										"type": "reference",
										"name": "__type"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "util/component-types.ts",
							"line": 173,
							"character": 24
						}
					]
				},
				{
					"id": 444,
					"name": "omitProps",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 445,
							"name": "omitProps",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 448,
									"name": "P",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 446,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 447,
													"name": "children",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/component-types.ts",
															"line": 190,
															"character": 46
														}
													],
													"type": {
														"type": "reference",
														"name": "React.ReactNode"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														447
													]
												}
											],
											"sources": [
												{
													"fileName": "util/component-types.ts",
													"line": 190,
													"character": 35
												}
											]
										}
									}
								}
							],
							"parameters": [
								{
									"id": 449,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "P",
										"constraint": {
											"type": "reflection",
											"declaration": {
												"id": 446,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"children": [
													{
														"id": 447,
														"name": "children",
														"kind": 32,
														"kindString": "Variable",
														"flags": {},
														"sources": [
															{
																"fileName": "util/component-types.ts",
																"line": 190,
																"character": 46
															}
														],
														"type": {
															"type": "reference",
															"name": "React.ReactNode"
														}
													}
												],
												"groups": [
													{
														"title": "Variables",
														"kind": 32,
														"children": [
															447
														]
													}
												],
												"sources": [
													{
														"fileName": "util/component-types.ts",
														"line": 190,
														"character": 35
													}
												]
											}
										}
									}
								},
								{
									"id": 450,
									"name": "component",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ICreateClassComponentClass",
										"id": 382,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "P",
												"constraint": {
													"type": "reflection",
													"declaration": {
														"id": 446,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {},
														"children": [
															{
																"id": 447,
																"name": "children",
																"kind": 32,
																"kindString": "Variable",
																"flags": {},
																"sources": [
																	{
																		"fileName": "util/component-types.ts",
																		"line": 190,
																		"character": 46
																	}
																],
																"type": {
																	"type": "reference",
																	"name": "React.ReactNode"
																}
															}
														],
														"groups": [
															{
																"title": "Variables",
																"kind": 32,
																"children": [
																	447
																]
															}
														],
														"sources": [
															{
																"fileName": "util/component-types.ts",
																"line": 190,
																"character": 35
															}
														]
													}
												}
											}
										]
									}
								},
								{
									"id": 451,
									"name": "keys",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"defaultValue": " []"
								},
								{
									"id": 452,
									"name": "targetIsDOMElement",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 453,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/component-types.ts",
							"line": 190,
							"character": 25
						}
					]
				},
				{
					"id": 416,
					"name": "rejectTypes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 417,
							"name": "rejectTypes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 418,
									"name": "children",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "React.ElementType"
									}
								},
								{
									"id": 419,
									"name": "types",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "never"
										}
									},
									"defaultValue": " []"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "stringLiteral",
											"value": "symbol"
										},
										{
											"type": "stringLiteral",
											"value": "object"
										},
										{
											"type": "stringLiteral",
											"value": "input"
										},
										{
											"type": "stringLiteral",
											"value": "a"
										},
										{
											"type": "stringLiteral",
											"value": "abbr"
										},
										{
											"type": "stringLiteral",
											"value": "address"
										},
										{
											"type": "stringLiteral",
											"value": "area"
										},
										{
											"type": "stringLiteral",
											"value": "article"
										},
										{
											"type": "stringLiteral",
											"value": "aside"
										},
										{
											"type": "stringLiteral",
											"value": "audio"
										},
										{
											"type": "stringLiteral",
											"value": "b"
										},
										{
											"type": "stringLiteral",
											"value": "base"
										},
										{
											"type": "stringLiteral",
											"value": "bdi"
										},
										{
											"type": "stringLiteral",
											"value": "bdo"
										},
										{
											"type": "stringLiteral",
											"value": "big"
										},
										{
											"type": "stringLiteral",
											"value": "blockquote"
										},
										{
											"type": "stringLiteral",
											"value": "body"
										},
										{
											"type": "stringLiteral",
											"value": "br"
										},
										{
											"type": "stringLiteral",
											"value": "button"
										},
										{
											"type": "stringLiteral",
											"value": "canvas"
										},
										{
											"type": "stringLiteral",
											"value": "caption"
										},
										{
											"type": "stringLiteral",
											"value": "cite"
										},
										{
											"type": "stringLiteral",
											"value": "code"
										},
										{
											"type": "stringLiteral",
											"value": "col"
										},
										{
											"type": "stringLiteral",
											"value": "colgroup"
										},
										{
											"type": "stringLiteral",
											"value": "data"
										},
										{
											"type": "stringLiteral",
											"value": "datalist"
										},
										{
											"type": "stringLiteral",
											"value": "dd"
										},
										{
											"type": "stringLiteral",
											"value": "del"
										},
										{
											"type": "stringLiteral",
											"value": "details"
										},
										{
											"type": "stringLiteral",
											"value": "dfn"
										},
										{
											"type": "stringLiteral",
											"value": "dialog"
										},
										{
											"type": "stringLiteral",
											"value": "div"
										},
										{
											"type": "stringLiteral",
											"value": "dl"
										},
										{
											"type": "stringLiteral",
											"value": "dt"
										},
										{
											"type": "stringLiteral",
											"value": "em"
										},
										{
											"type": "stringLiteral",
											"value": "embed"
										},
										{
											"type": "stringLiteral",
											"value": "fieldset"
										},
										{
											"type": "stringLiteral",
											"value": "figcaption"
										},
										{
											"type": "stringLiteral",
											"value": "figure"
										},
										{
											"type": "stringLiteral",
											"value": "footer"
										},
										{
											"type": "stringLiteral",
											"value": "form"
										},
										{
											"type": "stringLiteral",
											"value": "h1"
										},
										{
											"type": "stringLiteral",
											"value": "h2"
										},
										{
											"type": "stringLiteral",
											"value": "h3"
										},
										{
											"type": "stringLiteral",
											"value": "h4"
										},
										{
											"type": "stringLiteral",
											"value": "h5"
										},
										{
											"type": "stringLiteral",
											"value": "h6"
										},
										{
											"type": "stringLiteral",
											"value": "head"
										},
										{
											"type": "stringLiteral",
											"value": "header"
										},
										{
											"type": "stringLiteral",
											"value": "hgroup"
										},
										{
											"type": "stringLiteral",
											"value": "hr"
										},
										{
											"type": "stringLiteral",
											"value": "html"
										},
										{
											"type": "stringLiteral",
											"value": "i"
										},
										{
											"type": "stringLiteral",
											"value": "iframe"
										},
										{
											"type": "stringLiteral",
											"value": "img"
										},
										{
											"type": "stringLiteral",
											"value": "ins"
										},
										{
											"type": "stringLiteral",
											"value": "kbd"
										},
										{
											"type": "stringLiteral",
											"value": "keygen"
										},
										{
											"type": "stringLiteral",
											"value": "label"
										},
										{
											"type": "stringLiteral",
											"value": "legend"
										},
										{
											"type": "stringLiteral",
											"value": "li"
										},
										{
											"type": "stringLiteral",
											"value": "link"
										},
										{
											"type": "stringLiteral",
											"value": "main"
										},
										{
											"type": "stringLiteral",
											"value": "map"
										},
										{
											"type": "stringLiteral",
											"value": "mark"
										},
										{
											"type": "stringLiteral",
											"value": "menu"
										},
										{
											"type": "stringLiteral",
											"value": "menuitem"
										},
										{
											"type": "stringLiteral",
											"value": "meta"
										},
										{
											"type": "stringLiteral",
											"value": "meter"
										},
										{
											"type": "stringLiteral",
											"value": "nav"
										},
										{
											"type": "stringLiteral",
											"value": "noscript"
										},
										{
											"type": "stringLiteral",
											"value": "ol"
										},
										{
											"type": "stringLiteral",
											"value": "optgroup"
										},
										{
											"type": "stringLiteral",
											"value": "option"
										},
										{
											"type": "stringLiteral",
											"value": "output"
										},
										{
											"type": "stringLiteral",
											"value": "p"
										},
										{
											"type": "stringLiteral",
											"value": "param"
										},
										{
											"type": "stringLiteral",
											"value": "picture"
										},
										{
											"type": "stringLiteral",
											"value": "pre"
										},
										{
											"type": "stringLiteral",
											"value": "progress"
										},
										{
											"type": "stringLiteral",
											"value": "q"
										},
										{
											"type": "stringLiteral",
											"value": "rp"
										},
										{
											"type": "stringLiteral",
											"value": "rt"
										},
										{
											"type": "stringLiteral",
											"value": "ruby"
										},
										{
											"type": "stringLiteral",
											"value": "s"
										},
										{
											"type": "stringLiteral",
											"value": "samp"
										},
										{
											"type": "stringLiteral",
											"value": "script"
										},
										{
											"type": "stringLiteral",
											"value": "section"
										},
										{
											"type": "stringLiteral",
											"value": "select"
										},
										{
											"type": "stringLiteral",
											"value": "small"
										},
										{
											"type": "stringLiteral",
											"value": "source"
										},
										{
											"type": "stringLiteral",
											"value": "span"
										},
										{
											"type": "stringLiteral",
											"value": "strong"
										},
										{
											"type": "stringLiteral",
											"value": "style"
										},
										{
											"type": "stringLiteral",
											"value": "sub"
										},
										{
											"type": "stringLiteral",
											"value": "summary"
										},
										{
											"type": "stringLiteral",
											"value": "sup"
										},
										{
											"type": "stringLiteral",
											"value": "table"
										},
										{
											"type": "stringLiteral",
											"value": "template"
										},
										{
											"type": "stringLiteral",
											"value": "tbody"
										},
										{
											"type": "stringLiteral",
											"value": "td"
										},
										{
											"type": "stringLiteral",
											"value": "textarea"
										},
										{
											"type": "stringLiteral",
											"value": "tfoot"
										},
										{
											"type": "stringLiteral",
											"value": "th"
										},
										{
											"type": "stringLiteral",
											"value": "thead"
										},
										{
											"type": "stringLiteral",
											"value": "time"
										},
										{
											"type": "stringLiteral",
											"value": "title"
										},
										{
											"type": "stringLiteral",
											"value": "tr"
										},
										{
											"type": "stringLiteral",
											"value": "track"
										},
										{
											"type": "stringLiteral",
											"value": "u"
										},
										{
											"type": "stringLiteral",
											"value": "ul"
										},
										{
											"type": "stringLiteral",
											"value": "var"
										},
										{
											"type": "stringLiteral",
											"value": "video"
										},
										{
											"type": "stringLiteral",
											"value": "wbr"
										},
										{
											"type": "stringLiteral",
											"value": "webview"
										},
										{
											"type": "stringLiteral",
											"value": "animate"
										},
										{
											"type": "stringLiteral",
											"value": "circle"
										},
										{
											"type": "stringLiteral",
											"value": "clipPath"
										},
										{
											"type": "stringLiteral",
											"value": "defs"
										},
										{
											"type": "stringLiteral",
											"value": "desc"
										},
										{
											"type": "stringLiteral",
											"value": "ellipse"
										},
										{
											"type": "stringLiteral",
											"value": "feBlend"
										},
										{
											"type": "stringLiteral",
											"value": "feColorMatrix"
										},
										{
											"type": "stringLiteral",
											"value": "feComponentTransfer"
										},
										{
											"type": "stringLiteral",
											"value": "feComposite"
										},
										{
											"type": "stringLiteral",
											"value": "feConvolveMatrix"
										},
										{
											"type": "stringLiteral",
											"value": "feDiffuseLighting"
										},
										{
											"type": "stringLiteral",
											"value": "feDisplacementMap"
										},
										{
											"type": "stringLiteral",
											"value": "feDistantLight"
										},
										{
											"type": "stringLiteral",
											"value": "feDropShadow"
										},
										{
											"type": "stringLiteral",
											"value": "feFlood"
										},
										{
											"type": "stringLiteral",
											"value": "feFuncA"
										},
										{
											"type": "stringLiteral",
											"value": "feFuncB"
										},
										{
											"type": "stringLiteral",
											"value": "feFuncG"
										},
										{
											"type": "stringLiteral",
											"value": "feFuncR"
										},
										{
											"type": "stringLiteral",
											"value": "feGaussianBlur"
										},
										{
											"type": "stringLiteral",
											"value": "feImage"
										},
										{
											"type": "stringLiteral",
											"value": "feMerge"
										},
										{
											"type": "stringLiteral",
											"value": "feMergeNode"
										},
										{
											"type": "stringLiteral",
											"value": "feMorphology"
										},
										{
											"type": "stringLiteral",
											"value": "feOffset"
										},
										{
											"type": "stringLiteral",
											"value": "fePointLight"
										},
										{
											"type": "stringLiteral",
											"value": "feSpecularLighting"
										},
										{
											"type": "stringLiteral",
											"value": "feSpotLight"
										},
										{
											"type": "stringLiteral",
											"value": "feTile"
										},
										{
											"type": "stringLiteral",
											"value": "feTurbulence"
										},
										{
											"type": "stringLiteral",
											"value": "filter"
										},
										{
											"type": "stringLiteral",
											"value": "foreignObject"
										},
										{
											"type": "stringLiteral",
											"value": "g"
										},
										{
											"type": "stringLiteral",
											"value": "image"
										},
										{
											"type": "stringLiteral",
											"value": "line"
										},
										{
											"type": "stringLiteral",
											"value": "linearGradient"
										},
										{
											"type": "stringLiteral",
											"value": "marker"
										},
										{
											"type": "stringLiteral",
											"value": "mask"
										},
										{
											"type": "stringLiteral",
											"value": "metadata"
										},
										{
											"type": "stringLiteral",
											"value": "path"
										},
										{
											"type": "stringLiteral",
											"value": "pattern"
										},
										{
											"type": "stringLiteral",
											"value": "polygon"
										},
										{
											"type": "stringLiteral",
											"value": "polyline"
										},
										{
											"type": "stringLiteral",
											"value": "radialGradient"
										},
										{
											"type": "stringLiteral",
											"value": "rect"
										},
										{
											"type": "stringLiteral",
											"value": "stop"
										},
										{
											"type": "stringLiteral",
											"value": "svg"
										},
										{
											"type": "stringLiteral",
											"value": "switch"
										},
										{
											"type": "stringLiteral",
											"value": "text"
										},
										{
											"type": "stringLiteral",
											"value": "textPath"
										},
										{
											"type": "stringLiteral",
											"value": "tspan"
										},
										{
											"type": "stringLiteral",
											"value": "use"
										},
										{
											"type": "stringLiteral",
											"value": "view"
										},
										{
											"type": "reference",
											"name": "FunctionComponent",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "any"
												}
											]
										},
										{
											"type": "reference",
											"name": "ComponentClass",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "any"
												},
												{
													"type": "intrinsic",
													"name": "any"
												}
											]
										},
										{
											"type": "stringLiteral",
											"value": "noindex"
										},
										{
											"type": "stringLiteral",
											"value": "animateMotion"
										},
										{
											"type": "stringLiteral",
											"value": "animateTransform"
										},
										{
											"type": "stringLiteral",
											"value": "mpath"
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/component-types.ts",
							"line": 111,
							"character": 27
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						382,
						302
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						402,
						420,
						407,
						429,
						436,
						444,
						416
					]
				}
			],
			"sources": [
				{
					"fileName": "util/component-types.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 898,
			"name": "\"util/dom-helpers\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/util/dom-helpers.ts",
			"children": [
				{
					"id": 913,
					"name": "dispatchDOMEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 914,
							"name": "dispatchDOMEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 915,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EventTarget"
									}
								},
								{
									"id": 916,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 917,
									"name": "assignedEventProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Event"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/dom-helpers.ts",
							"line": 36,
							"character": 32
						}
					]
				},
				{
					"id": 899,
					"name": "getAbsoluteBoundingClientRect",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 900,
							"name": "getAbsoluteBoundingClientRect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 901,
									"name": "domNode",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "HTMLElement"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 902,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 903,
											"name": "bottom",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "util/dom-helpers.ts",
													"line": 7,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": " elementRect.bottom + window.pageYOffset"
										},
										{
											"id": 907,
											"name": "height",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "util/dom-helpers.ts",
													"line": 11,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": " elementRect.height"
										},
										{
											"id": 905,
											"name": "left",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "util/dom-helpers.ts",
													"line": 9,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": " elementRect.left + window.pageXOffset"
										},
										{
											"id": 906,
											"name": "right",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "util/dom-helpers.ts",
													"line": 10,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": " elementRect.right + window.pageXOffset"
										},
										{
											"id": 904,
											"name": "top",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "util/dom-helpers.ts",
													"line": 8,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": " elementRect.top + window.pageYOffset"
										},
										{
											"id": 908,
											"name": "width",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "util/dom-helpers.ts",
													"line": 12,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": " elementRect.width"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												903,
												907,
												905,
												906,
												904,
												908
											]
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/dom-helpers.ts",
							"line": 3,
							"character": 45
						}
					]
				},
				{
					"id": 909,
					"name": "scrollParentTo",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 910,
							"name": "scrollParentTo",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 911,
									"name": "domNode",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "HTMLElement"
									}
								},
								{
									"id": 912,
									"name": "additionalOffset",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/dom-helpers.ts",
							"line": 16,
							"character": 30
						}
					]
				},
				{
					"id": 918,
					"name": "sharesAncestor",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 919,
							"name": "sharesAncestor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "sharesAncestor",
								"text": "Recursively looks at `node` and its parents for `nodeName` and makes\nsure it contains `siblingNode`.\n",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 920,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "dom node to check if any of its ancestors are a `<label>`"
									},
									"type": {
										"type": "reference",
										"name": "Node"
									}
								},
								{
									"id": 921,
									"name": "siblingNode",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "dom node to see if it shares an ancestor"
									},
									"type": {
										"type": "reference",
										"name": "Node"
									}
								},
								{
									"id": 922,
									"name": "nodeName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "dom node name, should be uppercased, e.g. `LABEL` or `SPAN`"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/dom-helpers.ts",
							"line": 54,
							"character": 30
						}
					]
				},
				{
					"id": 923,
					"name": "shiftChildren",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 924,
							"name": "shiftChildren",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 925,
									"name": "parent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "HTMLElement"
									}
								},
								{
									"id": 926,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/dom-helpers.ts",
							"line": 69,
							"character": 29
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						913,
						899,
						909,
						918,
						923
					]
				}
			],
			"sources": [
				{
					"fileName": "util/dom-helpers.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 927,
			"name": "\"util/formatters\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/util/formatters.ts",
			"children": [
				{
					"id": 928,
					"name": "formatAbbreviatedNumber",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 929,
							"name": "formatAbbreviatedNumber",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 930,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/formatters.ts",
							"line": 3,
							"character": 39
						}
					]
				},
				{
					"id": 931,
					"name": "formatThousands",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 932,
							"name": "formatThousands",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 933,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/formatters.ts",
							"line": 9,
							"character": 31
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						928,
						931
					]
				}
			],
			"sources": [
				{
					"fileName": "util/formatters.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 23,
			"name": "\"util/logger\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/util/logger.ts",
			"children": [
				{
					"id": 24,
					"name": "isDevMode",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/logger.ts",
							"line": 4,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": " (function isReactInDev() {\n\t// This property gets injected via Webpack.\n\treturn process.env.NODE_ENV !== 'production'; // eslint-disable-line no-undef\n})()"
				},
				{
					"id": 25,
					"name": "isNode",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/logger.ts",
							"line": 9,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": " typeof process === 'object' && process.title === 'node'"
				},
				{
					"id": 26,
					"name": "logger",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/logger.ts",
							"line": 11,
							"character": 19
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 27,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 32,
									"name": "error",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util/logger.ts",
											"line": 18,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "error",
										"id": 62
									}
								},
								{
									"id": 33,
									"name": "errorOnce",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util/logger.ts",
											"line": 19,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"name": "errorOnce",
										"id": 65
									}
								},
								{
									"id": 28,
									"name": "log",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util/logger.ts",
											"line": 14,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "log",
										"id": 48
									}
								},
								{
									"id": 29,
									"name": "logOnce",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util/logger.ts",
											"line": 15,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "logOnce",
										"id": 51
									}
								},
								{
									"id": 34,
									"name": "resetOnce",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util/logger.ts",
											"line": 20,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"name": "resetOnce",
										"id": 43
									}
								},
								{
									"id": 30,
									"name": "warn",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util/logger.ts",
											"line": 16,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"name": "warn",
										"id": 55
									}
								},
								{
									"id": 31,
									"name": "warnOnce",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util/logger.ts",
											"line": 17,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"name": "warnOnce",
										"id": 58
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										32,
										33,
										28,
										29,
										34,
										30,
										31
									]
								}
							]
						}
					},
					"defaultValue": " (function() {\n\treturn checkIsDev()\n\t\t? {\n\t\t\t\tlog,\n\t\t\t\tlogOnce,\n\t\t\t\twarn,\n\t\t\t\twarnOnce,\n\t\t\t\terror,\n\t\t\t\terrorOnce,\n\t\t\t\tresetOnce,\n\t\t  }\n\t\t: {\n\t\t\t\tlog: _.noop,\n\t\t\t\tlogOnce: _.noop,\n\t\t\t\twarn: _.noop,\n\t\t\t\twarnOnce: _.noop,\n\t\t\t\terror: _.noop,\n\t\t\t\terrorOnce: _.noop,\n\t\t\t\tresetOnce: _.noop,\n\t\t  };\n})()"
				},
				{
					"id": 35,
					"name": "onceMap",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/logger.ts",
							"line": 33,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 36,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {}
						}
					}
				},
				{
					"id": 46,
					"name": "checkIsDev",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 47,
							"name": "checkIsDev",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/logger.ts",
							"line": 46,
							"character": 26
						}
					]
				},
				{
					"id": 62,
					"name": "error",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 63,
							"name": "error",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 64,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/logger.ts",
							"line": 86,
							"character": 14
						}
					]
				},
				{
					"id": 65,
					"name": "errorOnce",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 66,
							"name": "errorOnce",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 67,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 68,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/logger.ts",
							"line": 99,
							"character": 18
						}
					]
				},
				{
					"id": 48,
					"name": "log",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 49,
							"name": "log",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 50,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/logger.ts",
							"line": 52,
							"character": 12
						}
					]
				},
				{
					"id": 51,
					"name": "logOnce",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 52,
							"name": "logOnce",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 53,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 54,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/logger.ts",
							"line": 65,
							"character": 16
						}
					]
				},
				{
					"id": 37,
					"name": "once",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 38,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 39,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 40,
									"name": "fn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 41,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 42,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "util/logger.ts",
													"line": 35,
													"character": 41
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/logger.ts",
							"line": 35,
							"character": 13
						}
					]
				},
				{
					"id": 43,
					"name": "resetOnce",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 44,
							"name": "resetOnce",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 45,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/logger.ts",
							"line": 42,
							"character": 18
						}
					]
				},
				{
					"id": 55,
					"name": "warn",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 56,
							"name": "warn",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 57,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/logger.ts",
							"line": 69,
							"character": 13
						}
					]
				},
				{
					"id": 58,
					"name": "warnOnce",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 59,
							"name": "warnOnce",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 60,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 61,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/logger.ts",
							"line": 82,
							"character": 17
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						24,
						25,
						26,
						35
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						46,
						62,
						65,
						48,
						51,
						37,
						43,
						55,
						58
					]
				}
			],
			"sources": [
				{
					"fileName": "util/logger.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 934,
			"name": "\"util/redux\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/util/redux.ts",
			"children": [
				{
					"id": 935,
					"name": "IGetReduxPrimitives",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Creates a redux reducer and connectors (inputs to redux-react's `connect`)",
						"tags": [
							{
								"tag": "param",
								"text": "",
								"param": "param"
							},
							{
								"tag": "param",
								"text": "the initial state object that the reducer will return",
								"param": "param.initialState"
							},
							{
								"tag": "param",
								"text": "a tree of lucid reducers",
								"param": "param.reducers"
							},
							{
								"tag": "param",
								"text": "array of strings representing the path to local state in global state",
								"param": "param.rootPath"
							},
							{
								"tag": "param",
								"text": "a top-level selector which takes as input state that has run through every selector in param.selectors",
								"param": "param.rootSelector"
							},
							{
								"tag": "param",
								"text": "a tree of lucid selectors",
								"param": "param.selectors"
							},
							{
								"tag": "returns",
								"text": "redux reducer and connectors\n"
							}
						]
					},
					"children": [
						{
							"id": 936,
							"name": "initialState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "util/redux.ts",
									"line": 35,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 937,
							"name": "reducers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "util/redux.ts",
									"line": 36,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 938,
							"name": "rootPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "util/redux.ts",
									"line": 37,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 939,
							"name": "rootSelector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "util/redux.ts",
									"line": 38,
									"character": 13
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 940,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 941,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 942,
													"name": "arg0",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "util/redux.ts",
											"line": 38,
											"character": 14
										}
									]
								}
							}
						},
						{
							"id": 943,
							"name": "selectors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "util/redux.ts",
									"line": 39,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								936,
								937,
								938,
								939,
								943
							]
						}
					],
					"sources": [
						{
							"fileName": "util/redux.ts",
							"line": 34,
							"character": 29
						}
					]
				},
				{
					"id": 981,
					"name": "ActionReducer",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "util/redux.ts",
							"line": 202,
							"character": 18
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 982,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 983,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 984,
											"name": "state",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 985,
											"name": "action",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 986,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "util/redux.ts",
									"line": 202,
									"character": 20
								}
							]
						}
					}
				},
				{
					"id": 944,
					"name": "Funk",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "util/redux.ts",
							"line": 6,
							"character": 9
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 945,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 946,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 947,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "util/redux.ts",
									"line": 6,
									"character": 11
								}
							]
						}
					}
				},
				{
					"id": 951,
					"name": "FunkThunk",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "util/redux.ts",
							"line": 8,
							"character": 14
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "Funk",
								"id": 944
							},
							{
								"type": "reference",
								"name": "Thunk",
								"id": 948
							}
						]
					}
				},
				{
					"id": 975,
					"name": "PayloadReducer",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Walks the reducer tree and generates a tree of redux reducers, converting the\nsignature from `(state, payload) => state` to `(state, action) => state`",
						"tags": [
							{
								"tag": "param",
								"text": "a tree of lucid reducers",
								"param": "reducers"
							},
							{
								"tag": "param",
								"text": "array of strings representing the path to the reducer",
								"param": "path"
							},
							{
								"tag": "returns",
								"text": "redux reducer tree\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "util/redux.ts",
							"line": 201,
							"character": 20
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 976,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 977,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 978,
											"name": "state",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 979,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 980,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "util/redux.ts",
									"line": 201,
									"character": 22
								}
							]
						}
					}
				},
				{
					"id": 948,
					"name": "Thunk",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "util/redux.ts",
							"line": 7,
							"character": 10
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 949,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 950,
									"name": "isThunk",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "util/redux.ts",
											"line": 7,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										950
									]
								}
							],
							"sources": [
								{
									"fileName": "util/redux.ts",
									"line": 7,
									"character": 12
								}
							]
						}
					}
				},
				{
					"id": 1005,
					"name": "mergeProps",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Merges state, dispatchTree, and ownProps into a single props object",
						"tags": [
							{
								"tag": "param",
								"text": "",
								"param": "state"
							},
							{
								"tag": "param",
								"text": "",
								"param": "dispatchTree"
							},
							{
								"tag": "param",
								"text": "",
								"param": "ownProps"
							},
							{
								"tag": "returns",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "util/redux.ts",
							"line": 304,
							"character": 16
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "(Anonymous function)"
							},
							{
								"type": "reference",
								"name": "MemoizedFunction"
							}
						]
					},
					"defaultValue": " _.memoize((state, dispatchTree, ownProps) => {\n\treturn _.mergeWith({}, state, dispatchTree, ownProps, safeMerge);\n})"
				},
				{
					"id": 1000,
					"name": "bindActionCreatorTree",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1001,
							"name": "bindActionCreatorTree",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Binds redux store.dispatch to actionCreators in a tree"
							},
							"parameters": [
								{
									"id": 1002,
									"name": "actionCreatorTree",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "a tree of redux action creator functions"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1003,
									"name": "dispatch",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the redux store's `dispatch` function"
									},
									"type": {
										"type": "reference",
										"name": "Funk",
										"id": 944
									}
								},
								{
									"id": 1004,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "array of strings representing the path to the action creator\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"defaultValue": " []"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/redux.ts",
							"line": 280,
							"character": 30
						}
					]
				},
				{
					"id": 1006,
					"name": "cleanArgs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1007,
							"name": "cleanArgs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1008,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/redux.ts",
							"line": 308,
							"character": 25
						}
					]
				},
				{
					"id": 991,
					"name": "createReducerFromReducerTree",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 992,
							"name": "createReducerFromReducerTree",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that calls every reducer in the reducer tree with the reducer's local state and action",
								"returns": "the redux reducer\n"
							},
							"parameters": [
								{
									"id": 993,
									"name": "reduxReducerTree",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "tree of redux reducers with signature `(state, action) => state`"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 994,
									"name": "initialState",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the initial state object that the reducer will return"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "reduxReducer"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/redux.ts",
							"line": 240,
							"character": 37
						}
					]
				},
				{
					"id": 995,
					"name": "createReduxReducer",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 996,
							"name": "createReduxReducer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Generates a redux reducer from a tree of lucid reducers",
								"returns": "the redux reducer\n"
							},
							"parameters": [
								{
									"id": 997,
									"name": "reducers",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "a tree of lucid reducers"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 998,
									"name": "initialState",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the initial state object that the reducer will return"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 999,
									"name": "rootPath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "array of strings representing the path to part of global state this reducer applies to"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "reduxReducer"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/redux.ts",
							"line": 269,
							"character": 27
						}
					]
				},
				{
					"id": 987,
					"name": "createReduxReducerTree",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 988,
							"name": "createReduxReducerTree",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 989,
									"name": "reducers",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 990,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"defaultValue": " []"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/redux.ts",
							"line": 204,
							"character": 31
						}
					]
				},
				{
					"id": 960,
					"name": "getReduxPrimitives",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 961,
							"name": "getReduxPrimitives",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 962,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"originalName": "__0",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 963,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 964,
													"name": "initialState",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/redux.ts",
															"line": 42,
															"character": 13
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												},
												{
													"id": 965,
													"name": "reducers",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/redux.ts",
															"line": 43,
															"character": 9
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												},
												{
													"id": 966,
													"name": "rootPath",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/redux.ts",
															"line": 44,
															"character": 9
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													"defaultValue": " []"
												},
												{
													"id": 967,
													"name": "rootSelector",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/redux.ts",
															"line": 45,
															"character": 13
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 968,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 969,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 970,
																			"name": "arg0",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															]
														}
													},
													"defaultValue": " _.identity"
												},
												{
													"id": 971,
													"name": "selectors",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/redux.ts",
															"line": 46,
															"character": 10
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														964,
														965,
														966,
														967,
														971
													]
												}
											],
											"sources": [
												{
													"fileName": "util/redux.ts",
													"line": 41,
													"character": 35
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 972,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 974,
											"name": "connectors",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "util/redux.ts",
													"line": 98,
													"character": 12
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"name": "devModeMapStateToProps"
														},
														{
															"type": "reference",
															"name": "mapDispatchToProps"
														},
														{
															"type": "intersection",
															"types": [
																{
																	"type": "reference",
																	"name": "(Anonymous function)"
																},
																{
																	"type": "reference",
																	"name": "MemoizedFunction"
																}
															]
														}
													]
												}
											},
											"defaultValue": " [\n\t\t\tisDevMode ? devModeMapStateToProps : mapStateToProps,\n\t\t\tmapDispatchToProps,\n\t\t\tmergeProps,\n\t\t]"
										},
										{
											"id": 973,
											"name": "reducer",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "util/redux.ts",
													"line": 97,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "reduxReducer"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												974,
												973
											]
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/redux.ts",
							"line": 41,
							"character": 34
						}
					]
				},
				{
					"id": 952,
					"name": "thunk",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 953,
							"name": "thunk",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Marks a function on the reducer tree as a thunk action creator so it doesn't\nget incorporated into the redux reducer",
								"returns": "with `isThunk` set to `true`\n"
							},
							"parameters": [
								{
									"id": 954,
									"name": "fn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FunkThunk",
										"id": 951
									}
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 955,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 956,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 957,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 958,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 959,
													"name": "isThunk",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "util/redux.ts",
															"line": 7,
															"character": 22
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														959
													]
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "util/redux.ts",
							"line": 17,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						935
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						981,
						944,
						951,
						975,
						948
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1005
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1000,
						1006,
						991,
						995,
						987,
						960,
						952
					]
				}
			],
			"sources": [
				{
					"fileName": "util/redux.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 69,
			"name": "\"util/state-management\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/util/state-management.ts",
			"children": [
				{
					"id": 101,
					"name": "HybridComponent",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isAbstract": true
					},
					"typeParameter": [
						{
							"id": 102,
							"name": "P",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 103,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 105,
							"name": "SS",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 152,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": ""
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/legacy-context.html\n"
									}
								]
							},
							"signatures": [
								{
									"id": 153,
									"name": "new HybridComponent",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 154,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HybridComponent",
										"id": 101
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Component.__constructor"
									}
								},
								{
									"id": 155,
									"name": "new HybridComponent",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "deprecated",
												"text": ""
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/docs/legacy-context.html\n"
											}
										]
									},
									"parameters": [
										{
											"id": 156,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "P"
											}
										},
										{
											"id": 157,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HybridComponent",
										"id": 101
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Component.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 433,
									"character": 21
								},
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 435,
									"character": 40
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.__constructor"
							}
						},
						{
							"id": 151,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.",
								"text": "```ts\nstatic contextType = MyContext\ncontext!: React.ContextType<typeof MyContext>\n```\n",
								"tags": [
									{
										"tag": "deprecated",
										"text": "if used without a type annotation, or without static contextType"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/legacy-context.html\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 433,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.context"
							}
						},
						{
							"id": 178,
							"name": "props",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 458,
									"character": 22
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "Readonly",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "P"
											}
										]
									},
									{
										"type": "reference",
										"name": "Readonly",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 179,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 180,
															"name": "children",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
																	"line": 458,
																	"character": 57
																}
															],
															"type": {
																"type": "reference",
																"name": "ReactNode"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																180
															]
														}
													],
													"sources": [
														{
															"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
															"line": 458,
															"character": 47
														}
													]
												}
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.props"
							}
						},
						{
							"id": 182,
							"name": "refs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 464,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 183,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 184,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 185,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ReactInstance"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
											"line": 464,
											"character": 13
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.refs"
							}
						},
						{
							"id": 181,
							"name": "state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 459,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "Readonly",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "S"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.state"
							}
						},
						{
							"id": 150,
							"name": "contextType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If set, `this.context` will be set at runtime to the current value of the given Context.",
								"text": "Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html#classcontexttype\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 418,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "Context",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.contextType"
							}
						},
						{
							"id": 104,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true
							},
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 43,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 130,
							"name": "UNSAFE_componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 131,
									"name": "UNSAFE_componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 646,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
							}
						},
						{
							"id": 136,
							"name": "UNSAFE_componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 137,
									"name": "UNSAFE_componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 138,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P"
													}
												]
											}
										},
										{
											"id": 139,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 678,
									"character": 40
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
							}
						},
						{
							"id": 145,
							"name": "UNSAFE_componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 146,
									"name": "UNSAFE_componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 147,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P"
													}
												]
											}
										},
										{
											"id": 148,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S"
													}
												]
											}
										},
										{
											"id": 149,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 706,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
							}
						},
						{
							"id": 115,
							"name": "componentDidCatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 116,
									"name": "componentDidCatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."
									},
									"parameters": [
										{
											"id": 117,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 118,
											"name": "errorInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ErrorInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.componentDidCatch"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 575,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.componentDidCatch"
							}
						},
						{
							"id": 106,
							"name": "componentDidMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 107,
									"name": "componentDidMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.componentDidMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 554,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.componentDidMount"
							}
						},
						{
							"id": 123,
							"name": "componentDidUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 124,
									"name": "componentDidUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately after updating occurs. Not called for the initial render.",
										"text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n"
									},
									"parameters": [
										{
											"id": 125,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P"
													}
												]
											}
										},
										{
											"id": 126,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S"
													}
												]
											}
										},
										{
											"id": 127,
											"name": "snapshot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SS",
												"id": 105
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "NewLifecycle.componentDidUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 617,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "NewLifecycle.componentDidUpdate"
							}
						},
						{
							"id": 128,
							"name": "componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 129,
									"name": "componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 632,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.componentWillMount"
							}
						},
						{
							"id": 132,
							"name": "componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 133,
									"name": "componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 134,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P"
													}
												]
											}
										},
										{
											"id": 135,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 661,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.componentWillReceiveProps"
							}
						},
						{
							"id": 113,
							"name": "componentWillUnmount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 114,
									"name": "componentWillUnmount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.componentWillUnmount"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 570,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.componentWillUnmount"
							}
						},
						{
							"id": 140,
							"name": "componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 141,
									"name": "componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 142,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P"
													}
												]
											}
										},
										{
											"id": 143,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S"
													}
												]
											}
										},
										{
											"id": 144,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DeprecatedLifecycle.componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 691,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedLifecycle.componentWillUpdate"
							}
						},
						{
							"id": 171,
							"name": "forceUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 172,
									"name": "forceUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 173,
											"name": "callBack",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 174,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 175,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Component.forceUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 450,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.forceUpdate"
							}
						},
						{
							"id": 119,
							"name": "getSnapshotBeforeUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 120,
									"name": "getSnapshotBeforeUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
										"text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"
									},
									"parameters": [
										{
											"id": 121,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P"
													}
												]
											}
										},
										{
											"id": 122,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "SS"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "NewLifecycle.getSnapshotBeforeUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 611,
									"character": 31
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "NewLifecycle.getSnapshotBeforeUpdate"
							}
						},
						{
							"id": 176,
							"name": "render",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 177,
									"name": "render",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReactNode"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Component.render"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 451,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.render"
							}
						},
						{
							"id": 158,
							"name": "setState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 159,
									"name": "setState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 160,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "typeParameter",
													"name": "S"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 161,
											"name": "state",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 162,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 163,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 164,
																			"name": "prevState",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "Readonly",
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "S"
																					}
																				]
																			}
																		},
																		{
																			"id": 165,
																			"name": "props",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "Readonly",
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "P"
																					}
																				]
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "null"
																			},
																			{
																				"type": "unknown",
																				"name": "S"
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 166,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {}
																				}
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
																	"line": 446,
																	"character": 18
																}
															]
														}
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "null"
															},
															{
																"type": "unknown",
																"name": "S"
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 167,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {}
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 168,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 169,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 170,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Component.setState"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 445,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Component.setState"
							}
						},
						{
							"id": 108,
							"name": "shouldComponentUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 109,
									"name": "shouldComponentUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called to determine whether the change in props and state should trigger a re-render.",
										"text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"
									},
									"parameters": [
										{
											"id": 110,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P"
													}
												]
											}
										},
										{
											"id": 111,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Readonly",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S"
													}
												]
											}
										},
										{
											"id": 112,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ComponentLifecycle.shouldComponentUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "/Users/jtoumey/Code/appnexus/lucid/node_modules/@types/react/index.d.ts",
									"line": 565,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ComponentLifecycle.shouldComponentUpdate"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								152
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								151,
								178,
								182,
								181,
								150,
								104
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								130,
								136,
								145,
								115,
								106,
								123,
								128,
								132,
								113,
								140,
								171,
								119,
								176,
								158,
								108
							]
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 42,
							"character": 30
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Component",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "P"
								},
								{
									"type": "typeParameter",
									"name": "S"
								}
							]
						}
					]
				},
				{
					"id": 95,
					"name": "IBaseComponentType",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"typeParameter": [
						{
							"id": 96,
							"name": "P",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 97,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 35,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								97
							]
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 34,
							"character": 28
						}
					]
				},
				{
					"id": 79,
					"name": "IBoundContext",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"typeParameter": [
						{
							"id": 80,
							"name": "P",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 81,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"children": [
						{
							"id": 82,
							"name": "getPropReplaceReducers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 83,
									"name": "getPropReplaceReducers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 84,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "P"
											}
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "__type"
											},
											{
												"type": "typeParameter",
												"name": "S",
												"constraint": {
													"type": "intrinsic",
													"name": "object"
												}
											},
											{
												"type": "typeParameter",
												"name": "P"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 21,
									"character": 23
								}
							]
						},
						{
							"id": 85,
							"name": "getProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 86,
									"name": "getProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 87,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "P"
											}
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "__type"
											},
											{
												"type": "typeParameter",
												"name": "S",
												"constraint": {
													"type": "intrinsic",
													"name": "object"
												}
											},
											{
												"type": "typeParameter",
												"name": "P"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 22,
									"character": 9
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								82,
								85
							]
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 20,
							"character": 23
						}
					]
				},
				{
					"id": 88,
					"name": "IBuildHybridComponentOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"typeParameter": [
						{
							"id": 89,
							"name": "P",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 90,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"children": [
						{
							"id": 94,
							"name": "initialComponentState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 31,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "S",
								"id": 90
							}
						},
						{
							"id": 92,
							"name": "reducers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 28,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Reducers",
								"id": 192,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "P"
									},
									{
										"type": "typeParameter",
										"name": "S",
										"constraint": {
											"type": "intrinsic",
											"name": "object"
										}
									}
								]
							}
						},
						{
							"id": 91,
							"name": "replaceEvents",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 26,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 93,
							"name": "selectors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 30,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Selectors",
								"id": 201,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "P"
									},
									{
										"type": "typeParameter",
										"name": "S",
										"constraint": {
											"type": "intrinsic",
											"name": "object"
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								94,
								92,
								91,
								93
							]
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 25,
							"character": 38
						}
					]
				},
				{
					"id": 98,
					"name": "IHybridCompatibleProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 99,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 100,
							"name": "initialState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 39,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "S",
								"id": 99
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								100
							]
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 38,
							"character": 39
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "IExpanderProps",
							"id": 638
						}
					]
				},
				{
					"id": 70,
					"name": "IStateOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"typeParameter": [
						{
							"id": 71,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"children": [
						{
							"id": 72,
							"name": "getState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 16,
									"character": 9
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 73,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 74,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "S",
												"constraint": {
													"type": "intrinsic",
													"name": "object"
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "util/state-management.ts",
											"line": 16,
											"character": 10
										}
									]
								}
							}
						},
						{
							"id": 75,
							"name": "setState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 17,
									"character": 9
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 76,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 77,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 78,
													"name": "arg0",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "S",
														"constraint": {
															"type": "intrinsic",
															"name": "object"
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "util/state-management.ts",
											"line": 17,
											"character": 10
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								72,
								75
							]
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 15,
							"character": 23
						}
					]
				},
				{
					"id": 186,
					"name": "Reducer",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 187,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 8,
							"character": 19
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 188,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 189,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 190,
											"name": "arg0",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "S",
												"constraint": {
													"type": "intrinsic",
													"name": "object"
												}
											}
										},
										{
											"id": 191,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "S",
										"constraint": {
											"type": "intrinsic",
											"name": "object"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 8,
									"character": 39
								}
							]
						}
					}
				},
				{
					"id": 192,
					"name": "Reducers",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 193,
							"name": "P",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 194,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 9,
							"character": 20
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 195,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 9,
									"character": 43
								}
							]
						}
					}
				},
				{
					"id": 196,
					"name": "Selector",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 197,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 10,
							"character": 20
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 198,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 199,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 200,
											"name": "arg0",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "S"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 10,
									"character": 25
								}
							]
						}
					}
				},
				{
					"id": 201,
					"name": "Selectors",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 202,
							"name": "P",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 203,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 11,
							"character": 21
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 204,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "util/state-management.ts",
									"line": 11,
									"character": 44
								}
							]
						}
					}
				},
				{
					"id": 268,
					"name": "reduceSelectors",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "reduceSelectors",
						"text": "Generates a root selector from a tree of selectors",
						"tags": [
							{
								"tag": "param",
								"text": "a tree of selectors",
								"param": "selectors"
							},
							{
								"tag": "returns",
								"text": "root selector that when called with state, calls each of\nthe selectors in the tree with the state local to that selector.\n\nThis function is memoized because it's recursive, and we want it to reuse\nthe functions created in the recursive reduce because those functions are\nalso memoized (reselect selectors are memoized with a cache of 1) and we want\nto maintain their caches.\n\nTODO: the types suck on this function but we spent a couple hours trying to\nget them to work and we couldn't figure out how to get generics to pass\nthrough _.memoize correctly. ¯\\_(ツ)_/¯\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 190,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " _.memoize((selectors: object) => {\n\tif (!isPlainObjectOrEsModule(selectors)) {\n\t\tthrow new Error(\n\t\t\t'Selectors must be a plain object with function or plain object values'\n\t\t);\n\t}\n\n\t/**\n\t * For each iteration of `reduceSelectors`, we return a memoized selector so\n\t * that individual branches maintain reference equality if they haven't been\n\t * modified, even if a sibling (and therefore the parent) has been modified.\n\t */\n\treturn createSelector(\n\t\t_.identity,\n\t\t(state: { [k: string]: any }) =>\n\t\t\t_.reduce(\n\t\t\t\tselectors,\n\t\t\t\t(acc: object, selector: any, key: string) => ({\n\t\t\t\t\t...acc,\n\t\t\t\t\t[key]: _.isFunction(selector)\n\t\t\t\t\t\t? selector(state)\n\t\t\t\t\t\t: reduceSelectors(selector)(state[key]),\n\t\t\t\t}),\n\t\t\t\tstate\n\t\t\t)\n\t);\n})"
				},
				{
					"id": 222,
					"name": "bindReducerToState",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 223,
							"name": "bindReducerToState",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 224,
									"name": "P",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 225,
									"name": "S",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"parameters": [
								{
									"id": 226,
									"name": "reducerFunction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Reducer",
										"id": 186,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "S",
												"constraint": {
													"type": "intrinsic",
													"name": "object"
												}
											}
										]
									}
								},
								{
									"id": 227,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"originalName": "__1",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 228,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 229,
													"name": "getState",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/state-management.ts",
															"line": 81,
															"character": 11
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 230,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 231,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "S",
																		"constraint": {
																			"type": "intrinsic",
																			"name": "object"
																		}
																	}
																}
															]
														}
													}
												},
												{
													"id": 232,
													"name": "setState",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/state-management.ts",
															"line": 81,
															"character": 21
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 233,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 234,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 235,
																			"name": "arg0",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "typeParameter",
																				"name": "S",
																				"constraint": {
																					"type": "intrinsic",
																					"name": "object"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														229,
														232
													]
												}
											],
											"sources": [
												{
													"fileName": "util/state-management.ts",
													"line": 80,
													"character": 29
												}
											]
										}
									}
								},
								{
									"id": 236,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"defaultValue": " []"
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "(Anonymous function)"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 237,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 238,
													"name": "path",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/state-management.ts",
															"line": 98,
															"character": 8
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														238
													]
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 79,
							"character": 34
						}
					]
				},
				{
					"id": 239,
					"name": "bindReducersToState",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 240,
							"name": "bindReducersToState",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 241,
									"name": "P",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 242,
									"name": "S",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"parameters": [
								{
									"id": 243,
									"name": "reducers",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Reducers",
										"id": 192,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "S",
												"constraint": {
													"type": "intrinsic",
													"name": "object"
												}
											}
										]
									}
								},
								{
									"id": 244,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"originalName": "__1",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 245,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 246,
													"name": "getState",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/state-management.ts",
															"line": 104,
															"character": 11
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 247,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 248,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "S",
																		"constraint": {
																			"type": "intrinsic",
																			"name": "object"
																		}
																	}
																}
															]
														}
													}
												},
												{
													"id": 249,
													"name": "setState",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/state-management.ts",
															"line": 104,
															"character": 21
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 250,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 251,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 252,
																			"name": "arg0",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "typeParameter",
																				"name": "S",
																				"constraint": {
																					"type": "intrinsic",
																					"name": "object"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														246,
														249
													]
												}
											],
											"sources": [
												{
													"fileName": "util/state-management.ts",
													"line": 103,
													"character": 26
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 253,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 102,
							"character": 35
						}
					]
				},
				{
					"id": 277,
					"name": "buildHybridComponent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 278,
							"name": "buildHybridComponent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 279,
									"name": "baseComponent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 280,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"originalName": "__1",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 281,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 283,
													"name": "reducers",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/state-management.ts",
															"line": 240,
															"character": 10
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													},
													"defaultValue": " _.get(baseComponent, 'definition.statics.reducers', {})"
												},
												{
													"id": 282,
													"name": "replaceEvents",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/state-management.ts",
															"line": 239,
															"character": 15
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"defaultValue": "false"
												},
												{
													"id": 284,
													"name": "selectors",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/state-management.ts",
															"line": 241,
															"character": 11
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													},
													"defaultValue": " _.get(baseComponent, 'definition.statics.selectors', {})"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														283,
														282,
														284
													]
												}
											],
											"sources": [
												{
													"fileName": "util/state-management.ts",
													"line": 237,
													"character": 20
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 236,
							"character": 36
						}
					]
				},
				{
					"id": 285,
					"name": "buildModernHybridComponent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 286,
							"name": "buildModernHybridComponent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 287,
									"name": "P",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IHybridCompatibleProps",
										"id": 98
									}
								},
								{
									"id": 288,
									"name": "S",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"parameters": [
								{
									"id": 289,
									"name": "BaseComponent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "ComponentType",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P",
														"constraint": {
															"type": "reference",
															"name": "IHybridCompatibleProps",
															"id": 98
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IBaseComponentType",
												"id": 95,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P",
														"constraint": {
															"type": "reference",
															"name": "IHybridCompatibleProps",
															"id": 98
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 290,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"originalName": "__1",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 291,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 297,
													"name": "initialComponentState",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/state-management.ts",
															"line": 326,
															"character": 23
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "unknown",
																"name": "S"
															}
														]
													}
												},
												{
													"id": 293,
													"name": "reducers",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/state-management.ts",
															"line": 324,
															"character": 10
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 294,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {}
														}
													}
												},
												{
													"id": 292,
													"name": "replaceEvents",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/state-management.ts",
															"line": 323,
															"character": 15
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"defaultValue": "false"
												},
												{
													"id": 295,
													"name": "selectors",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/state-management.ts",
															"line": 325,
															"character": 11
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 296,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {}
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														297,
														293,
														292,
														295
													]
												}
											],
											"sources": [
												{
													"fileName": "util/state-management.ts",
													"line": 321,
													"character": 57
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "WrappedHybridComponent"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 317,
							"character": 42
						}
					]
				},
				{
					"id": 298,
					"name": "buildStatefulComponent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 299,
							"name": "buildStatefulComponent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 300,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 387,
							"character": 38
						}
					]
				},
				{
					"id": 205,
					"name": "getDeepPaths",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 206,
							"name": "getDeepPaths",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 207,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 208,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 209,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 210,
															"name": "k",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "util/state-management.ts",
													"line": 47,
													"character": 5
												}
											]
										}
									}
								},
								{
									"id": 211,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"defaultValue": " []"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 46,
							"character": 28
						}
					]
				},
				{
					"id": 254,
					"name": "getStatefulPropsContext",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 255,
							"name": "getStatefulPropsContext",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 256,
									"name": "P",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 257,
									"name": "S",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"parameters": [
								{
									"id": 258,
									"name": "reducers",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Reducers",
										"id": 192,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "S",
												"constraint": {
													"type": "intrinsic",
													"name": "object"
												}
											}
										]
									}
								},
								{
									"id": 259,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"originalName": "__1",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 260,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 261,
													"name": "getState",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/state-management.ts",
															"line": 121,
															"character": 11
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 262,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 263,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "S",
																		"constraint": {
																			"type": "intrinsic",
																			"name": "object"
																		}
																	}
																}
															]
														}
													}
												},
												{
													"id": 264,
													"name": "setState",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "util/state-management.ts",
															"line": 121,
															"character": 21
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 265,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 266,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 267,
																			"name": "arg0",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "typeParameter",
																				"name": "S",
																				"constraint": {
																					"type": "intrinsic",
																					"name": "object"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														261,
														264
													]
												}
											],
											"sources": [
												{
													"fileName": "util/state-management.ts",
													"line": 120,
													"character": 26
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IBoundContext",
								"id": 79,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "P"
									},
									{
										"type": "typeParameter",
										"name": "S",
										"constraint": {
											"type": "intrinsic",
											"name": "object"
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 119,
							"character": 39
						}
					]
				},
				{
					"id": 212,
					"name": "isPlainObjectOrEsModule",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 213,
							"name": "isPlainObjectOrEsModule",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 214,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 60,
							"character": 39
						}
					]
				},
				{
					"id": 215,
					"name": "omitFunctionPropsDeep",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 216,
							"name": "omitFunctionPropsDeep",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 217,
									"name": "P",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 218,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "object"
											},
											{
												"type": "typeParameter",
												"name": "P"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 219,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 220,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 221,
													"name": "k",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 64,
							"character": 37
						}
					]
				},
				{
					"id": 269,
					"name": "safeMerge",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 270,
							"name": "safeMerge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 271,
									"name": "objValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 272,
									"name": "srcValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									{
										"type": "reference",
										"name": "ReactElement",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "unknown"
											},
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 273,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 274,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 275,
																			"name": "props",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "typeParameter",
																				"name": "P"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "reference",
																				"name": "ReactElement"
																			},
																			{
																				"type": "intrinsic",
																				"name": "null"
																			}
																		]
																	}
																}
															]
														}
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 276,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {}
														}
													}
												]
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "util/state-management.ts",
							"line": 218,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						101
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						95,
						79,
						88,
						98,
						70
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						186,
						192,
						196,
						201
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						268
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						222,
						239,
						277,
						285,
						298,
						205,
						254,
						212,
						215,
						269
					]
				}
			],
			"sources": [
				{
					"fileName": "util/state-management.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"util/style-helpers\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/util/style-helpers.ts",
			"children": [
				{
					"id": 12,
					"name": "LUCID_CSS_NAMESPACE",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/style-helpers.ts",
							"line": 39,
							"character": 33
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 13,
					"name": "NAMESPACE",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/style-helpers.ts",
							"line": 40,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\n\ttypeof LUCID_CSS_NAMESPACE !== 'undefined' ? LUCID_CSS_NAMESPACE : 'lucid'"
				},
				{
					"id": 2,
					"name": "RANDOM_INTEGER",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "util/style-helpers.ts",
							"line": 4,
							"character": 20
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " _.random(0, Number.MAX_SAFE_INTEGER)"
				},
				{
					"id": 14,
					"name": "lucidClassNames",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "Exports a lucid-bound version of classnames, which can be make more specific\nto a component.",
						"text": "Example:\n  const cx = lucidClassNames.bind('&-Button')\n\n  cx('&',{\n    '&-active': true\n  }, ['custom-classname']) === 'lucid-Button lucid-Button-active custom-classname'\n"
					},
					"sources": [
						{
							"fileName": "util/style-helpers.ts",
							"line": 54,
							"character": 28
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "cx"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 15,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 16,
											"name": "bind",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 17,
													"name": "bind",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 18,
															"name": "nextValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															},
															"defaultValue": " value"
														},
														{
															"id": 19,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intersection",
														"types": [
															{
																"type": "reference",
																"name": "cx"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "util/style-helpers.ts",
													"line": 28,
													"character": 6
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												16
											]
										}
									]
								}
							}
						]
					},
					"defaultValue": " bindClassNames(NAMESPACE)"
				},
				{
					"id": 3,
					"name": "bindClassNames",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4,
							"name": "bindClassNames",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "bindClassNames",
								"text": "Returns a version of the `classnames` functions where `&` is bound to a given\nvalue. The returned functions can be further bound to more specific values for\n`&` which allows your bound classnames to look closer to style selector.\n\nExamples:\n  bindClassNames('lucid')('&-Button') === 'lucid-Button'\n  bindClassNames('lucid').bind('&-Button')('&-active') === 'lucid-Button-active'\n"
							},
							"parameters": [
								{
									"id": 5,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"\""
								},
								{
									"id": 6,
									"name": "variable",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RegExp"
									},
									"defaultValue": " /&/g"
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "cx"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 7,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 8,
													"name": "bind",
													"kind": 64,
													"kindString": "Function",
													"flags": {},
													"signatures": [
														{
															"id": 9,
															"name": "bind",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 10,
																	"name": "nextValue",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	},
																	"defaultValue": " value"
																},
																{
																	"id": 11,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intersection",
																"types": [
																	{
																		"type": "reference",
																		"name": "cx"
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "util/style-helpers.ts",
															"line": 28,
															"character": 6
														}
													]
												}
											],
											"groups": [
												{
													"title": "Functions",
													"kind": 64,
													"children": [
														8
													]
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "util/style-helpers.ts",
							"line": 17,
							"character": 30
						}
					]
				},
				{
					"id": 20,
					"name": "uniqueName",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 21,
							"name": "uniqueName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 22,
									"name": "prefix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/style-helpers.ts",
							"line": 56,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						12,
						13,
						2,
						14
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						3,
						20
					]
				}
			],
			"sources": [
				{
					"fileName": "util/style-helpers.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1009,
			"name": "\"util/text-manipulation\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jtoumey/Code/appnexus/lucid/src/util/text-manipulation.ts",
			"children": [
				{
					"id": 1015,
					"name": "getCombinedChildText",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1016,
							"name": "getCombinedChildText",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the combined text of all descendant strings",
								"returns": "string\n"
							},
							"parameters": [
								{
									"id": 1017,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "React.PropsWithChildren",
										"typeArguments": [
											{
												"type": "reference",
												"name": "__type"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/text-manipulation.ts",
							"line": 49,
							"character": 36
						}
					]
				},
				{
					"id": 1010,
					"name": "partitionText",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1011,
							"name": "partitionText",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs a regex search and returns a partitioning around the matching substring: [pre, match, post]",
								"returns": "string[]\n"
							},
							"parameters": [
								{
									"id": 1012,
									"name": "text",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1013,
									"name": "pattern",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RegExp"
									}
								},
								{
									"id": 1014,
									"name": "length",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "(optional): provide a max length for the matching substring\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util/text-manipulation.ts",
							"line": 13,
							"character": 29
						}
					]
				},
				{
					"id": 1018,
					"name": "propsSearch",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1019,
							"name": "propsSearch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Perform a regex search on all text found in a component's descendants",
								"returns": "boolean\n"
							},
							"parameters": [
								{
									"id": 1020,
									"name": "text",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1021,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "reference",
										"name": "React.PropsWithChildren",
										"typeArguments": [
											{
												"type": "reference",
												"name": "__type"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "util/text-manipulation.ts",
							"line": 75,
							"character": 27
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1015,
						1010,
						1018
					]
				}
			],
			"sources": [
				{
					"fileName": "util/text-manipulation.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				454,
				490,
				591,
				630,
				558,
				511,
				634,
				753,
				807,
				485,
				816,
				301,
				898,
				927,
				23,
				934,
				69,
				1,
				1009
			]
		}
	]
}