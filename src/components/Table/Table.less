@import (reference) '../../styles/variables.less';
@import (reference) '../../styles/mixins.less';

@Table-cell-padding-extended: 8px 9.4px;
@Table-cell-padding-compressed: 2.5px 9.4px;

.@{prefix}-Table {
	font: 500 @font;
	color: @color-textColor;
	background-color: @color-white;
	border-collapse: collapse;
	border-spacing: 0;
	box-sizing: border-box;

	// `Table`.`hasBorder` prop
	&-has-border {
		border: @border-table;
	}

	// `Table`.`density` prop
	&-density-extended {
		& > .@{prefix}-Table-Tbody > .@{prefix}-Table-Tr > .@{prefix}-Table-Td {
			padding: @Table-cell-padding-extended;
		}
	}

	&-density-compressed {
		& > .@{prefix}-Table-Tbody > .@{prefix}-Table-Tr > .@{prefix}-Table-Td {
			padding: @Table-cell-padding-compressed;
		}
	}

	// padding was causing content in `Th` to not line up with `Td`
	.@{prefix}-Table-Th {
		padding: 0;
	}

	// `Table`.`hasWordWrap` prop
	.@{prefix}-Table-Td,
	.@{prefix}-Table-Th {
		white-space: nowrap;
	}

	&-has-word-wrap {
		.@{prefix}-Table-Td,
		.@{prefix}-Table-Th {
			white-space: initial;
		}
	}

	// Table header styles
	&.@{prefix}-Table-has-light-header > &-Thead {
		background-color: @color-table-header-light;
		color: @color-darkGray;
		border: 1px solid @color-borderColorLight;
		& > .@{prefix}-Table-Tr > .@{prefix}-Table-Th {
			border: @border-table-header-light;
		}
		& > .@{prefix}-Table-Tr > .@{prefix}-Table-Th {
			&.@{prefix}-Table-is-sortable {
					&:hover {
						background-color: @color-table-header-sorted-light;
					}
			}

			& > .@{prefix}-Table-Th-inner {
					// `Th`.`isSorted` prop
					.@{prefix}-Table-Th-inner-caret {
						.@{prefix}-Table-sort-icon {
							fill: @color-textColor;
						}
					}
			}
		}
	}

	& > &-Thead {
		background-color: @color-table-header;
		color: @color-white;

		// Table header cell styles
		& > .@{prefix}-Table-Tr > .@{prefix}-Table-Th {
			border: @border-table-header;
			&.@{prefix}-Table-has-light-header {
				border: @border-table-header-light;
			}

			height: @size-standard-height; // effectively min height

			// remove all borders from the perimeter of the header
			&.@{prefix}-Table-is-first-row {
				border-top: 0 none @color-transparent;
			}

			&.@{prefix}-Table-is-last-row {
				border-bottom: 0 none @color-transparent;
			}

			&.@{prefix}-Table-is-first-col {
				border-left: 0 none @color-transparent;
			}

			&.@{prefix}-Table-is-last-col {
				border-right: 0 none @color-transparent;
			}
			// `Th`.`isSortable` prop
			&.@{prefix}-Table-is-sortable {
				cursor: pointer;

				&:hover {
					background-color: @color-table-header-sorted;
				}
			}

			// header cell content
			& > .@{prefix}-Table-Th-inner {
				width: 100%;
				height: 100%;
				display: flex;
				justify-content: flex-end;

				.@{prefix}-Table-Th-inner-content {
					flex: 1 0 auto;
					display: flex;
					align-items: center;
					margin: 2.5px 9.4px;
				}
				// `Th`.`isSorted` prop
				.@{prefix}-Table-Th-inner-caret {
					margin-right: 9px;
					display: flex;
					align-items: center;

					.@{prefix}-Table-sort-icon {
						fill: @color-white;
						width: 8px;
						height: 8px;
					}
				}
				// `Th`.`isResizable` prop
				.@{prefix}-Table-Th-inner-resize {
					cursor: ew-resize;
					width: 4px;
					background-color: fade(@color-black, 70%);
					opacity: 0;
					transition: opacity @timing-animation-hover;

					&:hover {
						opacity: 1;
					}
				}
			}

			// `Th`.`align` prop - use flex alignments in header
			&.@{prefix}-Table-align-left > .@{prefix}-Table-Th-inner .@{prefix}-Table-Th-inner-content {
				justify-content: flex-start;
			}

			&.@{prefix}-Table-align-center > .@{prefix}-Table-Th-inner .@{prefix}-Table-Th-inner-content {
				justify-content: center;
			}

			&.@{prefix}-Table-align-right > .@{prefix}-Table-Th-inner .@{prefix}-Table-Th-inner-content {
				justify-content: flex-end;
			}
		}
	}

	// Table body cell styles
	& > &-Tbody {
		& > .@{prefix}-Table-Tr {

			// `Td`.`align` prop - use text alignments in body
			// Table body cell styles
			& > .@{prefix}-Table-Td {
				background-clip: padding-box; // fixes Firefox background paints over collapsed border
				border-bottom: @border-table-body;

				// remove all borders from the perimeter of the body
				&.@{prefix}-Table-is-first-row {
					border-top: 0 none @color-transparent;
				}

				&.@{prefix}-Table-is-last-row {
					border-bottom: 0 none @color-transparent;
				}

				&.@{prefix}-Table-is-first-col {
					border-left: 0 none @color-transparent;
				}

				&.@{prefix}-Table-is-last-col {
					border-right: 0 none @color-transparent;
				}

				// `Td`.`hasBorderRight` prop
				&.@{prefix}-Table-has-border-right {
					border-right: @border-table-body;
				}

				// `Td`.`hasBorderLeft` prop
				&.@{prefix}-Table-has-border-left {
					border-left: @border-table-body;
				}

				&.@{prefix}-Table-align-left {
					text-align: left;
				}

				&.@{prefix}-Table-align-center {
					text-align: center;
				}

				&.@{prefix}-Table-align-right {
					text-align: right;
				}
			}

			// style row cells on hover
			&:hover {
				.selectCellsOnRow({ background-color: @color-lightGray;});
			};

			// `Tr`.`isSelected` prop
			// style row cells
			&.@{prefix}-Table-is-selected {
				.selectCellsOnRow({background-color: @featured-color-primary-backgroundColorLight;});

				// style row cells on hover
				&:hover {
					.selectCellsOnRow({background-color: multiply(@color-primaryLight, @color-lightGray);});
				}
			}

			// `Tr`.`isActive` prop
			// style row cells
			&.@{prefix}-Table-is-active {
				.selectCellsOnRow({background-color: @featured-color-primary-backgroundColor;});
				// always show marker on first cell
				.selectFirstCellOnRow({.left-marker(1);});

				// style row cells on hover
				&:hover {
					.selectCellsOnRow({background-color: multiply(@color-primaryMedium, @color-lightGray);});
				}
			}

			// `Tr`.`isActionable` prop
			// style cells of rows which are only actionable but not active
			&.@{prefix}-Table-is-actionable:not(.@{prefix}-Table-is-active) {

				// place hidden marker on first cell
				.selectFirstCellOnRow({ .left-marker(0); });

				// show marker on hover
				&:hover {
					.selectFirstCellOnRow({ .left-marker(1); });
				}
			}
		}
	}

	// link styles in the Table body
	a {
		color: @color-linkColor;
	}
}

// `Tr`.`isDisabled` prop
.@{prefix}-Table-is-disabled {
	color: @color-disabledText;
	font-style: italic;

	a {
		color: fade(multiply(@color-disabledText, @color-linkColor), 50%);
	}
}

// MIXINS

// Select all 1-height cells on the current body row and apply the given styles
.selectCellsOnRow(@ruleset) {
	& > .@{prefix}-Table-Td {
		&:not([rowspan]),
		&[rowspan='1'] {
			@ruleset();
		}
	}
}

// Select the first 1-height cell on the current body row and apply the given styles
.selectFirstCellOnRow(@ruleset) {
	& > .@{prefix}-Table-Td {
		&.@{prefix}-Table-is-first-single {
			@ruleset();
		}
	}
}

